{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\n\nexport class FeedbackCombFilter extends ToneAudioWorklet {\n  constructor() {\n    super(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n    this.name = \"FeedbackCombFilter\";\n    const options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.delayTime = new Param({\n      context: this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: this._dummyParam,\n      swappable: true\n    });\n    this.resonance = new Param({\n      context: this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: this._dummyParam,\n      swappable: true\n    });\n    readOnly(this, [\"resonance\", \"delayTime\"]);\n  }\n\n  _audioWorkletName() {\n    return workletName;\n  }\n  /**\n   * The default parameters\n   */\n\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const delayTime = node.parameters.get(\"delayTime\");\n    ;\n    this.delayTime.setParam(delayTime);\n    const feedback = node.parameters.get(\"feedback\");\n    ;\n    this.resonance.setParam(feedback);\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.delayTime.dispose();\n    this.resonance.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}