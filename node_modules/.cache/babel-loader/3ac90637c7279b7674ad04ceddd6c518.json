{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth {\n  constructor() {\n    super(optionsFromArguments(FMSynth.getDefaults(), arguments));\n    this.name = \"FMSynth\";\n    const options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      value: options.modulationIndex\n    }); // control the two voices frequency\n\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n\n    this._modulator.connect(this._modulationNode.gain);\n\n    this._modulationNode.connect(this._carrier.frequency);\n\n    this._carrier.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ModulationSynth.getDefaults(), {\n      modulationIndex: 10\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}