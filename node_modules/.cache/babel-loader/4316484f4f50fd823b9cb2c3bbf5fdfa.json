{"ast":null,"code":"import { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\n\nexport class LFOEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"LFOEffect\";\n    this._lfo = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    this.depth = this._lfo.amplitude;\n    this.frequency = this._lfo.frequency;\n    this.type = options.type;\n    readOnly(this, [\"frequency\", \"depth\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 1,\n      type: \"sine\",\n      depth: 1\n    });\n  }\n  /**\n   * Start the effect.\n   */\n\n\n  start(time) {\n    this._lfo.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n\n\n  stop(time) {\n    this._lfo.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  sync() {\n    this._lfo.sync();\n\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  unsync() {\n    this._lfo.unsync();\n\n    return this;\n  }\n  /**\n   * The type of the LFO's oscillator: See [[Oscillator.type]]\n   * @example\n   * const autoFilter = new Tone.AutoFilter().start().toDestination();\n   * const noise = new Tone.Noise().start().connect(autoFilter);\n   * autoFilter.type = \"square\";\n   */\n\n\n  get type() {\n    return this._lfo.type;\n  }\n\n  set type(type) {\n    this._lfo.type = type;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfo.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}