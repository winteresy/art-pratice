{"ast":null,"code":"export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {\n  return new Promise(resolve => {\n    /*\n     * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n     * constructor for an AudioWorkletNode can be used here to skip the test.\n     */\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      resolve(true);\n    } else {\n      const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n\n      const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n      const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n      const channelData = ones.getChannelData(0);\n      channelData[0] = 1;\n      channelData[1] = 1;\n      const source = nativeAudioContext.createBufferSource();\n      source.buffer = ones;\n      source.loop = true;\n      source.connect(analyzer).connect(nativeAudioContext.destination);\n      source.connect(dummy);\n      source.disconnect(dummy); // tslint:disable-next-line:deprecation\n\n      analyzer.onaudioprocess = event => {\n        const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n        if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n\n        source.stop();\n        analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n        source.disconnect(analyzer);\n        analyzer.disconnect(nativeAudioContext.destination);\n      };\n\n      source.start();\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}