{"ast":null,"code":"import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\n\nexport class StereoEffect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"StereoEffect\";\n    this.input = new Gain({\n      context: this.context\n    }); // force mono sources to be stereo\n\n    this.input.channelCount = 2;\n    this.input.channelCountMode = \"explicit\";\n    this._dryWet = this.output = new CrossFade({\n      context: this.context,\n      fade: options.wet\n    });\n    this.wet = this._dryWet.fade;\n    this._split = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._merge = new Merge({\n      context: this.context,\n      channels: 2\n    }); // connections\n\n    this.input.connect(this._split); // dry wet connections\n\n    this.input.connect(this._dryWet.a);\n\n    this._merge.connect(this._dryWet.b);\n\n    readOnly(this, [\"wet\"]);\n  }\n  /**\n   * Connect the left part of the effect\n   */\n\n\n  connectEffectLeft() {\n    var _ref;\n\n    this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 0, 0);\n\n    connectSeries(...arguments);\n    connect((_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]), this._merge, 0, 0);\n  }\n  /**\n   * Connect the right part of the effect\n   */\n\n\n  connectEffectRight() {\n    var _ref2;\n\n    this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 1, 0);\n\n    connectSeries(...arguments);\n    connect((_ref2 = arguments.length - 1, _ref2 < 0 || arguments.length <= _ref2 ? undefined : arguments[_ref2]), this._merge, 0, 1);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dryWet.dispose();\n\n    this._split.dispose();\n\n    this._merge.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}