{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n      return nativeOscillatorNode;\n    };\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module"}