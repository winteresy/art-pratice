{"ast":null,"code":"import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\n\nexport class AutoPanner extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"AutoPanner\";\n    const options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n    this._panner = new Panner({\n      context: this.context,\n      channelCount: options.channelCount\n    }); // connections\n\n    this.connectEffect(this._panner);\n\n    this._lfo.connect(this._panner.pan);\n\n    this._lfo.min = -1;\n    this._lfo.max = 1;\n  }\n\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}