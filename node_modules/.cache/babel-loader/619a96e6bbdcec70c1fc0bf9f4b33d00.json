{"ast":null,"code":"import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\n\nexport class Delay extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n    this.name = \"Delay\";\n    const options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n    const maxDelayInSeconds = this.toSeconds(options.maxDelay);\n    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n    this.delayTime = new Param({\n      context: this.context,\n      param: this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: this.maxDelay\n    });\n    readOnly(this, \"delayTime\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  }\n  /**\n   * The maximum delay time. This cannot be changed after\n   * the value is passed into the constructor.\n   */\n\n\n  get maxDelay() {\n    return this._maxDelay;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.disconnect();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}