{"ast":null,"code":"import { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    this.override = true;\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    this._constantSource.start(0);\n\n    this.input = this._param = this._constantSource.offset;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n\n  connect(destination) {\n    let outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    this._constantSource.dispose();\n\n    return this;\n  } //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n\n\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n\n    return this;\n  }\n\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n    return this;\n  }\n\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n\n    return this;\n  }\n\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  get value() {\n    return this._param.value;\n  }\n\n  set value(value) {\n    this._param.value = value;\n  }\n\n  get convert() {\n    return this._param.convert;\n  }\n\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n\n  get units() {\n    return this._param.units;\n  }\n\n  get overridden() {\n    return this._param.overridden;\n  }\n\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n\n  get maxValue() {\n    return this._param.maxValue;\n  }\n\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * See [[Param.apply]].\n   */\n\n\n  apply(param) {\n    this._param.apply(param);\n\n    return this;\n  }\n\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","map":null,"metadata":{},"sourceType":"module"}