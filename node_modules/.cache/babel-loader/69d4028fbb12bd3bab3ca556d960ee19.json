{"ast":null,"code":"import { ToneAudioNode } from \"../context/ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope\";\nexport class ToneAudioWorklet extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"ToneAudioWorklet\";\n    /**\n     * The constructor options for the node\n     */\n\n    this.workletOptions = {};\n    /**\n     * Callback which is invoked when there is an error in the processing\n     */\n\n    this.onprocessorerror = noOp;\n    const blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], {\n      type: \"text/javascript\"\n    }));\n\n    const name = this._audioWorkletName();\n\n    this._dummyGain = this.context.createGain();\n    this._dummyParam = this._dummyGain.gain; // Register the processor\n\n    this.context.addAudioWorkletModule(blobUrl, name).then(() => {\n      // create the worklet when it's read\n      if (!this.disposed) {\n        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n        this.onReady(this._worklet);\n      }\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dummyGain.disconnect();\n\n    if (this._worklet) {\n      this._worklet.port.postMessage(\"dispose\");\n\n      this._worklet.disconnect();\n    }\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}