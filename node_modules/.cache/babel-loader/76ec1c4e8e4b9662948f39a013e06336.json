{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\n\nexport class Limiter extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    this.name = \"Limiter\";\n    const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    this._compressor = this.input = this.output = new Compressor({\n      context: this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    this.threshold = this._compressor.threshold;\n    readOnly(this, \"threshold\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      threshold: -12\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal.\n   */\n\n\n  get reduction() {\n    return this._compressor.reduction;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._compressor.dispose();\n\n    this.threshold.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}