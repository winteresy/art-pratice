{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class PannerNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n\n      const mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      super(context, false, nativePannerNode, pannerNodeRenderer);\n      this._nativePannerNode = nativePannerNode; // Bug #74: Safari does not export the correct values for maxValue and minValue.\n\n      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    get coneInnerAngle() {\n      return this._nativePannerNode.coneInnerAngle;\n    }\n\n    set coneInnerAngle(value) {\n      this._nativePannerNode.coneInnerAngle = value;\n    }\n\n    get coneOuterAngle() {\n      return this._nativePannerNode.coneOuterAngle;\n    }\n\n    set coneOuterAngle(value) {\n      this._nativePannerNode.coneOuterAngle = value;\n    }\n\n    get coneOuterGain() {\n      return this._nativePannerNode.coneOuterGain;\n    }\n\n    set coneOuterGain(value) {\n      this._nativePannerNode.coneOuterGain = value;\n    }\n\n    get distanceModel() {\n      return this._nativePannerNode.distanceModel;\n    }\n\n    set distanceModel(value) {\n      this._nativePannerNode.distanceModel = value;\n    }\n\n    get maxDistance() {\n      return this._nativePannerNode.maxDistance;\n    }\n\n    set maxDistance(value) {\n      this._nativePannerNode.maxDistance = value;\n    }\n\n    get orientationX() {\n      return this._orientationX;\n    }\n\n    get orientationY() {\n      return this._orientationY;\n    }\n\n    get orientationZ() {\n      return this._orientationZ;\n    }\n\n    get panningModel() {\n      return this._nativePannerNode.panningModel;\n    }\n\n    set panningModel(value) {\n      this._nativePannerNode.panningModel = value;\n    }\n\n    get positionX() {\n      return this._positionX;\n    }\n\n    get positionY() {\n      return this._positionY;\n    }\n\n    get positionZ() {\n      return this._positionZ;\n    }\n\n    get refDistance() {\n      return this._nativePannerNode.refDistance;\n    }\n\n    set refDistance(value) {\n      this._nativePannerNode.refDistance = value;\n    }\n\n    get rolloffFactor() {\n      return this._nativePannerNode.rolloffFactor;\n    }\n\n    set rolloffFactor(value) {\n      this._nativePannerNode.rolloffFactor = value;\n    }\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}