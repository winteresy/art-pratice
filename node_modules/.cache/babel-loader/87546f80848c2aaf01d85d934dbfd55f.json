{"ast":null,"code":"import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nexport class PluckSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    this.name = \"PluckSynth\";\n    const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    this._noise = new Noise({\n      context: this.context,\n      type: \"pink\"\n    });\n    this.attackNoise = options.attackNoise;\n    this._lfcf = new LowpassCombFilter({\n      context: this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    this.resonance = options.resonance;\n    this.release = options.release;\n\n    this._noise.connect(this._lfcf);\n\n    this._lfcf.connect(this.output);\n  }\n\n  static getDefaults() {\n    return deepMerge(Instrument.getDefaults(), {\n      attackNoise: 1,\n      dampening: 4000,\n      resonance: 0.7,\n      release: 1\n    });\n  }\n  /**\n   * The dampening control. i.e. the lowpass filter frequency of the comb filter\n   * @min 0\n   * @max 7000\n   */\n\n\n  get dampening() {\n    return this._lfcf.dampening;\n  }\n\n  set dampening(fq) {\n    this._lfcf.dampening = fq;\n  }\n\n  triggerAttack(note, time) {\n    const freq = this.toFrequency(note);\n    time = this.toSeconds(time);\n    const delayAmount = 1 / freq;\n\n    this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n    this._noise.start(time);\n\n    this._noise.stop(time + delayAmount * this.attackNoise);\n\n    this._lfcf.resonance.cancelScheduledValues(time);\n\n    this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n    return this;\n  }\n  /**\n   * Ramp down the [[resonance]] to 0 over the duration of the release time.\n   */\n\n\n  triggerRelease(time) {\n    this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._noise.dispose();\n\n    this._lfcf.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}