{"ast":null,"code":"import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nexport class PingPongDelay extends StereoXFeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    this.name = \"PingPongDelay\";\n    const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    this._leftDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightPreDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = new Signal({\n      context: this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    this.connectEffectLeft(this._leftDelay);\n    this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n    this._feedbackL.disconnect();\n\n    this._feedbackL.connect(this._rightDelay);\n\n    readOnly(this, [\"delayTime\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._leftDelay.dispose();\n\n    this._rightDelay.dispose();\n\n    this._rightPreDelay.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}