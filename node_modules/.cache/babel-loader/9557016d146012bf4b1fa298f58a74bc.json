{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\n\nexport class Gate extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    this.name = \"Gate\";\n    const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.smoothing\n    });\n    this._gt = new GreaterThan({\n      context: this.context,\n      value: dbToGain(options.threshold)\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this._gate = this.output = new Gain({\n      context: this.context\n    }); // connections\n\n    this.input.connect(this._gate); // the control signal\n\n    this.input.chain(this._follower, this._gt, this._gate.gain);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  }\n  /**\n   * The threshold of the gate in decibels\n   */\n\n\n  get threshold() {\n    return gainToDb(this._gt.value);\n  }\n\n  set threshold(thresh) {\n    this._gt.value = dbToGain(thresh);\n  }\n  /**\n   * The attack/decay speed of the gate. See [[Follower.smoothing]]\n   */\n\n\n  get smoothing() {\n    return this._follower.smoothing;\n  }\n\n  set smoothing(smoothingTime) {\n    this._follower.smoothing = smoothingTime;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n\n    this._follower.dispose();\n\n    this._gt.dispose();\n\n    this._gate.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}