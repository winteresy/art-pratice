{"ast":null,"code":"import { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\n\nexport class Pow extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Pow\";\n    const options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    this._exponentScaler = this.input = this.output = new WaveShaper({\n      context: this.context,\n      mapping: this._expFunc(options.value),\n      length: 8192\n    });\n    this._exponent = options.value;\n  }\n\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  }\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n\n\n  _expFunc(exponent) {\n    return val => {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  }\n  /**\n   * The value of the exponent.\n   */\n\n\n  get value() {\n    return this._exponent;\n  }\n\n  set value(exponent) {\n    this._exponent = exponent;\n\n    this._exponentScaler.setMap(this._expFunc(this._exponent));\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._exponentScaler.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}