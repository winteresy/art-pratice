{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n      return nativeGainNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module"}