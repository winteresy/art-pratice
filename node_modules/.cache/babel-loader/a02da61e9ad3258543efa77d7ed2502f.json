{"ast":null,"code":"import { Scale } from \"./Scale\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\n\nexport class ScaleExp extends Scale {\n  constructor() {\n    super(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n    this.name = \"ScaleExp\";\n    const options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n    this.input = this._exp = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n\n    this._exp.connect(this._mult);\n  }\n\n  static getDefaults() {\n    return Object.assign(Scale.getDefaults(), {\n      exponent: 1\n    });\n  }\n  /**\n   * Instead of interpolating linearly between the [[min]] and\n   * [[max]] values, setting the exponent will interpolate between\n   * the two values with an exponential curve.\n   */\n\n\n  get exponent() {\n    return this._exp.value;\n  }\n\n  set exponent(exp) {\n    this._exp.value = exp;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._exp.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}