{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n\n      const mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(this, 1);\n    }\n\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n\n      return this._nativeWaveShaperNode.curve;\n    }\n\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}