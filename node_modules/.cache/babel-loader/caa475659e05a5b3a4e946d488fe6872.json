{"ast":null,"code":"var _jsxFileName = \"/Users/alicegurova/art-pactice/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_13/Container.jsx\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as Tone from 'tone';\nimport React, { Component } from 'react';\nimport * as bassSettings from './tunes/bass.js';\nimport * as melodySettings from './tunes/melody.js';\nimport * as drumsSettings from './tunes/drums.js';\nimport ToneSynth from './modules/ToneSynth.jsx';\nimport ChorusEffect from './modules/ChorusEffect.jsx';\nimport DistortionEffect from './modules/DistortionEffect.jsx';\nimport BitCrusherEffect from './modules/BitCrusherEffect.jsx';\nimport PingPongDelayEffect from './modules/PingPongDelayEffect.jsx';\nimport Channel from './modules/Channel.jsx';\nimport SC_ToggleButtonSet from './components/SC_ToggleButtonSet.jsx';\nimport SC_ToggleButton from './components/SC_ToggleButton';\nimport SC_Button from './components/SC_Button';\nimport SC_Slider from './components/SC_Slider';\nimport SC_Knob from './components/SC_Knob';\nimport Surface from './components/Surface';\nimport Select from './components/Select';\nvar bassSynth;\nvar bassChorus;\nvar bassPingPongDelay;\nvar bassPart;\nvar melodySynth;\nvar melodyChorus;\nvar melodyDistortion;\nvar melodyBitCrusher;\nvar melodyPingPongDelay;\nvar melodyPart;\nvar sampler;\nvar samplerChannel;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.shuffle = function (array) {\n      var currentIndex = array.length,\n          randomIndex; // While there remain elements to shuffle.\n\n      while (currentIndex != 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex-- // And swap it with the current element.\n        // prettier-ignore\n        ;\n        var _ref = [array[randomIndex], array[currentIndex]];\n        array[currentIndex] = _ref[0];\n        array[randomIndex] = _ref[1];\n      }\n\n      return array;\n    };\n\n    _this.handleMelodyChangeMeasureSelectClose = function (e) {\n      console.log('handleMelodyChangeMeasureSelectClose');\n      var isUIShown = _this.state.isUIShown; // console.log(e.target.classList[0] == 'currentValue')\n      //\n      // if (isUIShown && e.target.classList[0] == 'currentValue') {\n      //   this.setState({\n      //     melodyChangeMeasureSelect: false\n      //   })\n      // } else {\n\n      if (e.target.classList[0] != 'currentValue') {\n        _this.setState({\n          melodyChangeMeasureSelect: false\n        });\n      } // }\n\n    };\n\n    _this.handleMelodyChangeMeasureSelectOpen = function () {\n      console.log('handleMelodyChangeMeasureSelectOpen');\n\n      _this.setState({\n        melodyChangeMeasureSelect: true\n      });\n    };\n\n    _this.handleMelodyChangeMeasure = function (property, value) {\n      _this.setState({\n        melodyChangeMeasureSelect: false,\n        melodyChangeMeasure: value\n      });\n    };\n\n    _this.handleMelodyChangeRandom = function () {\n      var melodyChangeRandom = _this.state.melodyChangeRandom;\n\n      _this.setState({\n        melodyChangeRandom: !melodyChangeRandom\n      });\n    };\n\n    _this.handleMelodyChange = function () {\n      var melodyChange = _this.state.melodyChange;\n\n      _this.setState({\n        melodyChange: !melodyChange\n      });\n    };\n\n    _this.handleKeydown = function (e) {\n      console.log(e.key, e.code, e.keyCode);\n\n      switch (e.keyCode) {\n        case 49:\n          _this.handleMelodySequenceChange('', 'steps1');\n\n          break;\n\n        case 50:\n          _this.handleMelodySequenceChange('', 'steps2');\n\n          break;\n\n        case 81:\n          sampler.triggerAttackRelease('A3', '1n');\n          break;\n      }\n    };\n\n    _this.handleStart = function () {\n      var _this$state = _this.state,\n          bassSettings = _this$state.bassSettings,\n          melodySettings = _this$state.melodySettings,\n          drumsSettings = _this$state.drumsSettings; //\n      //\n\n      bassSynth = new Tone.Synth(bassSettings.synth);\n      bassChorus = new Tone.Chorus(bassSettings.chorus).start();\n      bassPingPongDelay = new Tone.PingPongDelay(bassSettings.pingPongDelay).toDestination();\n      bassSynth.chain(bassChorus, bassPingPongDelay);\n      bassPart = new Tone.Part(function (time, note) {\n        bassSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, bassSettings.sequence.steps1).start(0);\n      bassPart.loopEnd = bassSettings.sequence.duration;\n      bassPart.loop = bassSettings.sequence.loop; //\n      //\n\n      melodySynth = new Tone.Synth(melodySettings.synth);\n      melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n      melodyDistortion = new Tone.Distortion(melodySettings.distortion);\n      melodyBitCrusher = new Tone.BitCrusher(melodySettings.bitCrusher);\n      melodyPingPongDelay = new Tone.PingPongDelay(melodySettings.pingPongDelay).toDestination();\n      melodySynth.chain(melodyChorus, melodyDistortion, melodyBitCrusher, melodyPingPongDelay);\n      melodyPart = new Tone.Part(function (time, note) {\n        melodySynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, melodySettings.sequence[melodySettings.sequence.current]).start(0);\n      melodyPart.loopEnd = melodySettings.sequence.duration;\n      melodyPart.loop = melodySettings.sequence.loop; //\n      //\n\n      sampler = new Tone.Sampler({\n        urls: {\n          A1: '00001-Linn-9000-BassDrumrum1.mp3',\n          A2: '00017-Linn-9000-Snare.mp3',\n          A3: '00002-Linn-9000-Clhh-1.mp3',\n          A4: '00064-Vermona-DRM1-MK3-Tom13.mp3'\n        },\n        baseUrl: 'http://localhost:3000/samples/' // onload: () => {\n        //   sampler.triggerAttackRelease(['A1', 'A2', 'A1', 'A2'], 0.5)\n        // }\n\n      });\n      samplerChannel = new Tone.Channel(drumsSettings.channel).toDestination();\n      sampler.chain(samplerChannel);\n      var drumsPart = new Tone.Part(function (time, note) {\n        sampler.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, drumsSettings.sequence.steps).start(0);\n      drumsPart.loopEnd = drumsSettings.sequence.duration;\n      drumsPart.loop = drumsSettings.sequence.loop;\n\n      _this.handleTransportChange('play', true);\n    };\n\n    _this.nextMeasure = function () {\n      var _this$state2 = _this.state,\n          melodyChangeMeasure = _this$state2.melodyChangeMeasure,\n          melodyChangeRandom = _this$state2.melodyChangeRandom,\n          melodyChange = _this$state2.melodyChange;\n\n      if (melodyChange) {\n        var position = Tone.Transport.position;\n        var regexBefore = /([\\w]+)/;\n        var measure = parseInt(position.match(regexBefore)[1]) + 1;\n        console.log('next measure', measure);\n        var squaresPassed = Math.floor(measure / melodyChangeMeasure);\n\n        if (measure == melodyChangeMeasure || measure - squaresPassed * melodyChangeMeasure == 0) {\n          console.log('change');\n          melodyPart.clear();\n\n          if (melodyChangeRandom) {\n            console.log('random');\n            var notes = [];\n            melodySettings.sequence.steps2.forEach(function (item, i) {\n              notes.push(item.noteName);\n            });\n            notes = _this.shuffle(notes);\n\n            var randomizedSequence = _toConsumableArray(melodySettings.sequence.steps2);\n\n            randomizedSequence.forEach(function (step, i) {\n              var newStep = Object.assign({}, step);\n              newStep.noteName = notes[i];\n              melodyPart.add(newStep);\n            });\n          } else {\n            melodySettings.sequence.steps2.forEach(function (step, i) {\n              melodyPart.add(step);\n            });\n          }\n        } else if (measure == melodyChangeMeasure + 1 || measure - squaresPassed * melodyChangeMeasure == 1) {\n          console.log('change back');\n          melodyPart.clear();\n          melodySettings.sequence.steps1.forEach(function (step, i) {\n            melodyPart.add(step);\n          });\n        }\n      }\n    };\n\n    _this.handleTransportChange = function (property, value) {\n      var bpm = _this.state.bpm;\n\n      switch (property) {\n        case 'play':\n          Tone.Transport.start();\n          Tone.Transport.scheduleRepeat(_this.nextMeasure, '1m');\n\n          _this.setState({\n            isStarted: true\n          });\n\n          break;\n\n        case 'bpm':\n          Tone.Transport.bpm.value = value;\n\n          _this.setState({\n            bpm: value\n          });\n\n          break;\n      }\n    };\n\n    _this.handleValueChange = function (instrumentName, property, value) {\n      var _this$state3 = _this.state,\n          bassSettings = _this$state3.bassSettings,\n          melodySettings = _this$state3.melodySettings;\n      var instrument;\n      var chorus;\n      var distortion;\n      var pingPongDelay;\n      var bitCrusher;\n      var settings;\n\n      if (instrumentName === 'bass') {\n        instrument = bassSynth;\n        chorus = bassChorus;\n        pingPongDelay = bassPingPongDelay;\n        settings = bassSettings;\n      } else if (instrumentName === 'melody') {\n        instrument = melodySynth;\n        chorus = melodyChorus;\n        distortion = melodyDistortion;\n        pingPongDelay = melodyPingPongDelay;\n        bitCrusher = melodyBitCrusher;\n        settings = melodySettings;\n      }\n\n      switch (property) {\n        case 'synthType':\n          instrument.oscillator.type = value;\n          settings.synth.oscillator.type = value;\n          break;\n\n        case 'synthShowEnvelope':\n          settings.synthUI.envelopeShow = value;\n          break;\n\n        case 'synthEnvelopeAttack':\n          instrument.envelope.attack = value;\n          settings.synth.envelope.attack = value;\n          break;\n\n        case 'synthEnvelopeDecay':\n          instrument.envelope.decay = value;\n          settings.synth.envelope.decay = value;\n          break;\n\n        case 'synthEnvelopeSustain':\n          instrument.envelope.sustain = value;\n          settings.synth.envelope.sustain = value;\n          break;\n\n        case 'synthEnvelopeRelease':\n          instrument.envelope.release = value;\n          settings.synth.envelope.release = value;\n          break;\n\n        case 'chorusWet':\n          chorus.wet.value = value;\n          settings.chorus.wet = value;\n          break;\n\n        case 'chorusType':\n          chorus.type = value;\n          settings.chorus.type = value;\n          break;\n\n        case 'chorusFrequency':\n          chorus.frequency.value = value;\n          settings.chorus.frequency = value;\n          break;\n\n        case 'chorusDelayTime':\n          chorus.delayTime = value;\n          settings.chorus.delayTime = value;\n          break;\n\n        case 'chorusDepth':\n          chorus.depth = value;\n          settings.chorus.depth = value;\n          break;\n\n        case 'chorusSpread':\n          chorus.spread = value;\n          settings.chorus.spread = value;\n          break;\n\n        case 'distortionWet':\n          distortion.wet.value = value;\n          settings.distortion.wet = value;\n          break;\n\n        case 'distortionDistortion':\n          distortion.distortion = value;\n          settings.distortion.distortion = value;\n          break;\n\n        case 'distortionOversample':\n          distortion.oversample = value;\n          settings.distortion.oversample = value;\n          break;\n\n        case 'bitCrusherWet':\n          bitCrusher.wet.value = value;\n          settings.bitCrusher.wet = value;\n          break;\n\n        case 'bitCrusherBits':\n          bitCrusher.bits = value;\n          settings.bitCrusher.bits = value;\n          break;\n\n        case 'pingPongDelayWet':\n          pingPongDelay.wet.value = value;\n          settings.pingPongDelay.wet = value;\n          break;\n\n        case 'pingPongDelayDelayTime':\n          pingPongDelay.delayTime.value = value;\n          settings.pingPongDelay.delayTime = value;\n          break;\n\n        case 'pingPongDelayMaxDelayTime':\n          pingPongDelay.maxDelayTime = value;\n          settings.pingPongDelay.maxDelayTime = value;\n          break;\n      }\n\n      _this.setState({\n        bassSettings: bassSettings,\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleMelodySoundPresetChange = function (property, value) {\n      var melodySettings = _this.state.melodySettings;\n      var preset = melodySettings.presets[value];\n      var instrument = melodySynth;\n      var chorus = melodyChorus;\n      var distortion = melodyDistortion;\n      var pingPongDelay = melodyPingPongDelay;\n      var bitCrusher = melodyBitCrusher;\n      var settings = melodySettings;\n      var _preset$synth = preset.synth,\n          oscillator = _preset$synth.oscillator,\n          envelope = _preset$synth.envelope;\n      instrument.oscillator.type = oscillator.type;\n      settings.synth.oscillator.type = oscillator.type;\n      instrument.envelope.attack = envelope.attack;\n      settings.synth.envelope.attack = envelope.attack;\n      instrument.envelope.decay = envelope.decay;\n      settings.synth.envelope.decay = envelope.decay;\n      instrument.envelope.sustain = envelope.sustain;\n      settings.synth.envelope.sustain = envelope.sustain;\n      instrument.envelope.release = envelope.release;\n      settings.synth.envelope.release = envelope.release;\n      chorus.wet.value = preset.chorus.wet;\n      settings.chorus.wet = preset.chorus.wet;\n      chorus.type = preset.chorus.type;\n      settings.chorus.type = preset.chorus.type;\n      chorus.frequency.value = preset.chorus.frequency;\n      settings.chorus.frequency = preset.chorus.frequency;\n      chorus.delayTime = preset.chorus.delayTime;\n      settings.chorus.delayTime = preset.chorus.delayTime;\n      chorus.depth = preset.chorus.depth;\n      settings.chorus.depth = preset.chorus.depth;\n      chorus.spread = preset.chorus.spread;\n      settings.chorus.spread = preset.chorus.spread;\n      distortion.wet.value = preset.distortion.wet;\n      settings.distortion.wet = preset.distortion.wet;\n      distortion.distortion = preset.distortion.distortion;\n      settings.distortion.distortion = preset.distortion.distortion;\n      distortion.oversample = preset.distortion.oversample;\n      settings.distortion.oversample = preset.distortion.oversample;\n      bitCrusher.wet.value = preset.bitCrusher.wet;\n      settings.bitCrusher.wet = preset.bitCrusher.wet;\n      bitCrusher.bits = preset.bitCrusher.bits;\n      settings.bitCrusher.bits = preset.bitCrusher.bits;\n      pingPongDelay.wet.value = preset.pingPongDelay.wet;\n      settings.pingPongDelay.wet = preset.pingPongDelay.wet;\n      pingPongDelay.delayTime.value = preset.pingPongDelay.delayTime;\n      settings.pingPongDelay.delayTime = preset.pingPongDelay.delayTime;\n      pingPongDelay.maxDelayTime = preset.pingPongDelay.maxDelayTime;\n      settings.pingPongDelay.maxDelayTime = preset.pingPongDelay.maxDelayTime;\n      settings.presets.current = value;\n\n      _this.setState({\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleMelodySequenceChange = function (property, value) {\n      var melodySettings = _this.state.melodySettings;\n      var steps = melodySettings.sequence[value];\n      melodySettings.sequence.current = value;\n      melodyPart.clear();\n      steps.forEach(function (step, i) {\n        melodyPart.add(step);\n      });\n\n      _this.setState({\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleDrumsValueChange = function (property, value) {\n      var drumsSettings = _this.state.drumsSettings;\n\n      if (property === 'channelVolume') {\n        samplerChannel.volume.value = value;\n        drumsSettings.channel.volume = value;\n      } else if (property === 'channelMute') {\n        console.log('=====BEFORE=====', drumsSettings.channel.mute, samplerChannel.mute, drumsSettings.channel.mute, samplerChannel);\n        var mute = !drumsSettings.channel.mute;\n        samplerChannel.mute = mute;\n        drumsSettings.channel.mute = mute;\n        console.log('=====AFTER=====', mute, samplerChannel.mute, drumsSettings.channel.mute, samplerChannel);\n      } else if (property === 'channelPan') {\n        samplerChannel.pan.value = value;\n        drumsSettings.channel.pan = value;\n      }\n\n      _this.setState({\n        drumsSettings: drumsSettings\n      });\n    };\n\n    _this.handleToggleUIShow = function () {\n      var isUIShown = _this.state.isUIShown;\n\n      _this.setState({\n        isUIShown: !isUIShown\n      });\n    };\n\n    _this.renderStartButton = function () {\n      return /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"Art Design & Coding Community\",\n        handleClick: _this.handleStart,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this.renderShowHideButton = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toggleUIButton\",\n        onClick: _this.handleToggleUIShow,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 7\n        }\n      }, \"Show/Hide UI\");\n    };\n\n    _this.renderUI = function () {\n      var _this$state4 = _this.state,\n          bpm = _this$state4.bpm,\n          melodyChangeMeasureSelect = _this$state4.melodyChangeMeasureSelect,\n          melodyChangeMeasure = _this$state4.melodyChangeMeasure,\n          melodyChangeRandom = _this$state4.melodyChangeRandom,\n          melodyChange = _this$state4.melodyChange,\n          bassSettings = _this$state4.bassSettings,\n          melodySettings = _this$state4.melodySettings,\n          drumsSettings = _this$state4.drumsSettings;\n      var melodyChangeButtonText = melodyChange ? 'On' : 'Off';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"instrumentUI\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"BPM\",\n        min: 0,\n        max: 300,\n        step: 1,\n        value: bpm,\n        property: \"bpm\",\n        handleChange: function handleChange(property, value) {\n          _this.handleTransportChange(property, value);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sampleButtonWrapper\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"Sample\",\n        handleClick: function handleClick() {\n          sampler.triggerAttackRelease('A4', '1n');\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(ToneSynth, {\n        title: \"Bass Synth\",\n        instrumentName: \"bass\",\n        settings: bassSettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(PingPongDelayEffect, {\n        title: \"Ping Pong Delay\",\n        instrumentName: \"bass\",\n        settings: bassSettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ChorusEffect, {\n        title: \"Chorus\",\n        instrumentName: \"bass\",\n        settings: bassSettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ToneSynth, {\n        title: \"Melody Synth\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButtonSet, {\n        name: \"Sequence\",\n        options: ['steps1', 'steps2'],\n        value: melodySettings.sequence.current,\n        property: \"melodySequence\",\n        handleChange: _this.handleMelodySequenceChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButtonSet, {\n        name: \"Sound\",\n        options: ['default', 'preset1', 'preset2'],\n        value: melodySettings.presets.current,\n        property: \"melodySoundPreset\",\n        handleChange: _this.handleMelodySoundPresetChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Select, {\n        name: \"Change melody on measure\",\n        options: [2, 4, 8, 16, 32],\n        isOpened: melodyChangeMeasureSelect,\n        value: melodyChangeMeasure,\n        property: \"\",\n        handleMelodyChangeMeasureSelectOpen: _this.handleMelodyChangeMeasureSelectOpen,\n        handleMelodyChangeMeasureSelectClose: _this.handleMelodyChangeMeasureSelectClose,\n        handleChange: _this.handleMelodyChangeMeasure,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButton, {\n        text: melodyChangeButtonText,\n        isOn: melodyChange,\n        handleClick: _this.handleMelodyChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButton, {\n        text: \"Random\",\n        isOn: melodyChangeRandom,\n        handleClick: _this.handleMelodyChangeRandom,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ChorusEffect, {\n        title: \"Chorus\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(DistortionEffect, {\n        title: \"Distortion\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(BitCrusherEffect, {\n        title: \"BitCrusher\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(PingPongDelayEffect, {\n        title: \"Ping Pong Delay\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Channel, {\n        settings: drumsSettings,\n        handleValueChange: _this.handleDrumsValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.state = {\n      isStarted: false,\n      isUIShown: false,\n      bpm: 80,\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: 8,\n      melodyChangeRandom: false,\n      melodyChange: false,\n      random: false,\n      bassSettings: bassSettings,\n      melodySettings: melodySettings,\n      drumsSettings: drumsSettings\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('keydown', this.handleKeydown);\n      document.addEventListener('click', this.handleMelodyChangeMeasureSelectClose);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          isStarted = _this$state5.isStarted,\n          isUIShown = _this$state5.isUIShown;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 7\n        }\n      }, isStarted ? this.renderShowHideButton() : this.renderStartButton(), isUIShown ? this.renderUI() : '');\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport { Container as default };","map":{"version":3,"names":["Tone","React","Component","bassSettings","melodySettings","drumsSettings","ToneSynth","ChorusEffect","DistortionEffect","BitCrusherEffect","PingPongDelayEffect","Channel","SC_ToggleButtonSet","SC_ToggleButton","SC_Button","SC_Slider","SC_Knob","Surface","Select","bassSynth","bassChorus","bassPingPongDelay","bassPart","melodySynth","melodyChorus","melodyDistortion","melodyBitCrusher","melodyPingPongDelay","melodyPart","sampler","samplerChannel","Container","props","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","handleMelodyChangeMeasureSelectClose","e","console","log","isUIShown","state","target","classList","setState","melodyChangeMeasureSelect","handleMelodyChangeMeasureSelectOpen","handleMelodyChangeMeasure","property","value","melodyChangeMeasure","handleMelodyChangeRandom","melodyChangeRandom","handleMelodyChange","melodyChange","handleKeydown","key","code","keyCode","handleMelodySequenceChange","triggerAttackRelease","handleStart","Synth","synth","Chorus","chorus","start","PingPongDelay","pingPongDelay","toDestination","chain","Part","time","note","noteName","duration","velocity","sequence","steps1","loopEnd","loop","Distortion","distortion","BitCrusher","bitCrusher","current","Sampler","urls","A1","A2","A3","A4","baseUrl","channel","drumsPart","steps","handleTransportChange","nextMeasure","position","Transport","regexBefore","measure","parseInt","match","squaresPassed","clear","notes","steps2","forEach","item","i","push","randomizedSequence","step","newStep","Object","assign","add","bpm","scheduleRepeat","isStarted","handleValueChange","instrumentName","instrument","settings","oscillator","type","synthUI","envelopeShow","envelope","attack","decay","sustain","release","wet","frequency","delayTime","depth","spread","oversample","bits","maxDelayTime","handleMelodySoundPresetChange","preset","presets","handleDrumsValueChange","volume","mute","pan","handleToggleUIShow","renderStartButton","renderShowHideButton","renderUI","melodyChangeButtonText","document","addEventListener"],"sources":["/Users/alicegurova/art-pactice/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_13/Container.jsx"],"sourcesContent":["import * as Tone from 'tone'\nimport React, { Component } from 'react'\n\nimport * as bassSettings from './tunes/bass.js'\nimport * as melodySettings from './tunes/melody.js'\nimport * as drumsSettings from './tunes/drums.js'\n\nimport ToneSynth from './modules/ToneSynth.jsx'\nimport ChorusEffect from './modules/ChorusEffect.jsx'\nimport DistortionEffect from './modules/DistortionEffect.jsx'\nimport BitCrusherEffect from './modules/BitCrusherEffect.jsx'\nimport PingPongDelayEffect from './modules/PingPongDelayEffect.jsx'\nimport Channel from './modules/Channel.jsx'\n\nimport SC_ToggleButtonSet from './components/SC_ToggleButtonSet.jsx'\nimport SC_ToggleButton from './components/SC_ToggleButton'\nimport SC_Button from './components/SC_Button'\nimport SC_Slider from './components/SC_Slider'\nimport SC_Knob from './components/SC_Knob'\nimport Surface from './components/Surface'\nimport Select from './components/Select'\n\nlet bassSynth\nlet bassChorus\nlet bassPingPongDelay\nlet bassPart\n\nlet melodySynth\nlet melodyChorus\nlet melodyDistortion\nlet melodyBitCrusher\nlet melodyPingPongDelay\nlet melodyPart\n\nlet sampler\nlet samplerChannel\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isStarted: false,\n      isUIShown: false,\n      bpm: 80,\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: 8,\n      melodyChangeRandom: false,\n      melodyChange: false,\n      random: false,\n      bassSettings,\n      melodySettings,\n      drumsSettings\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeydown)\n\n    document.addEventListener(\n      'click',\n      this.handleMelodyChangeMeasureSelectClose\n    )\n  }\n\n  shuffle = (array) => {\n    let currentIndex = array.length,\n      randomIndex\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex--\n\n      // And swap it with the current element.\n      // prettier-ignore\n      ;[array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex]\n      ]\n    }\n\n    return array\n  }\n\n  handleMelodyChangeMeasureSelectClose = (e) => {\n    console.log('handleMelodyChangeMeasureSelectClose')\n    const { isUIShown } = this.state\n\n    // console.log(e.target.classList[0] == 'currentValue')\n    //\n    // if (isUIShown && e.target.classList[0] == 'currentValue') {\n    //   this.setState({\n    //     melodyChangeMeasureSelect: false\n    //   })\n    // } else {\n    if (e.target.classList[0] != 'currentValue') {\n      this.setState({\n        melodyChangeMeasureSelect: false\n      })\n    }\n    // }\n  }\n\n  handleMelodyChangeMeasureSelectOpen = () => {\n    console.log('handleMelodyChangeMeasureSelectOpen')\n\n    this.setState({\n      melodyChangeMeasureSelect: true\n    })\n  }\n\n  handleMelodyChangeMeasure = (property, value) => {\n    this.setState({\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: value\n    })\n  }\n\n  handleMelodyChangeRandom = () => {\n    const { melodyChangeRandom } = this.state\n\n    this.setState({\n      melodyChangeRandom: !melodyChangeRandom\n    })\n  }\n\n  handleMelodyChange = () => {\n    const { melodyChange } = this.state\n\n    this.setState({\n      melodyChange: !melodyChange\n    })\n  }\n\n  handleKeydown = (e) => {\n    console.log(e.key, e.code, e.keyCode)\n\n    switch (e.keyCode) {\n      case 49:\n        this.handleMelodySequenceChange('', 'steps1')\n        break\n      case 50:\n        this.handleMelodySequenceChange('', 'steps2')\n        break\n      case 81:\n        sampler.triggerAttackRelease('A3', '1n')\n        break\n    }\n  }\n\n  handleStart = () => {\n    const { bassSettings, melodySettings, drumsSettings } = this.state\n\n    //\n    //\n    bassSynth = new Tone.Synth(bassSettings.synth)\n    bassChorus = new Tone.Chorus(bassSettings.chorus).start()\n\n    bassPingPongDelay = new Tone.PingPongDelay(\n      bassSettings.pingPongDelay\n    ).toDestination()\n\n    bassSynth.chain(bassChorus, bassPingPongDelay)\n\n    bassPart = new Tone.Part((time, note) => {\n      bassSynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, bassSettings.sequence.steps1).start(0)\n\n    bassPart.loopEnd = bassSettings.sequence.duration\n    bassPart.loop = bassSettings.sequence.loop\n    //\n    //\n    melodySynth = new Tone.Synth(melodySettings.synth)\n    melodyChorus = new Tone.Chorus(melodySettings.chorus).start()\n    melodyDistortion = new Tone.Distortion(melodySettings.distortion)\n    melodyBitCrusher = new Tone.BitCrusher(melodySettings.bitCrusher)\n\n    melodyPingPongDelay = new Tone.PingPongDelay(\n      melodySettings.pingPongDelay\n    ).toDestination()\n\n    melodySynth.chain(\n      melodyChorus,\n      melodyDistortion,\n      melodyBitCrusher,\n      melodyPingPongDelay\n    )\n\n    melodyPart = new Tone.Part((time, note) => {\n      melodySynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, melodySettings.sequence[melodySettings.sequence.current]).start(0)\n\n    melodyPart.loopEnd = melodySettings.sequence.duration\n    melodyPart.loop = melodySettings.sequence.loop\n    //\n    //\n    sampler = new Tone.Sampler({\n      urls: {\n        A1: '00001-Linn-9000-BassDrumrum1.mp3',\n        A2: '00017-Linn-9000-Snare.mp3',\n        A3: '00002-Linn-9000-Clhh-1.mp3',\n        A4: '00064-Vermona-DRM1-MK3-Tom13.mp3'\n      },\n      baseUrl: 'http://localhost:3000/samples/'\n      // onload: () => {\n      //   sampler.triggerAttackRelease(['A1', 'A2', 'A1', 'A2'], 0.5)\n      // }\n    })\n\n    samplerChannel = new Tone.Channel(drumsSettings.channel).toDestination()\n\n    sampler.chain(samplerChannel)\n\n    const drumsPart = new Tone.Part((time, note) => {\n      sampler.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, drumsSettings.sequence.steps).start(0)\n\n    drumsPart.loopEnd = drumsSettings.sequence.duration\n    drumsPart.loop = drumsSettings.sequence.loop\n\n    this.handleTransportChange('play', true)\n  }\n\n  nextMeasure = () => {\n    const { melodyChangeMeasure, melodyChangeRandom, melodyChange } = this.state\n\n    if (melodyChange) {\n      const position = Tone.Transport.position\n      const regexBefore = /([\\w]+)/\n      let measure = parseInt(position.match(regexBefore)[1]) + 1\n      console.log('next measure', measure)\n\n      const squaresPassed = Math.floor(measure / melodyChangeMeasure)\n\n      if (\n        measure == melodyChangeMeasure ||\n        measure - squaresPassed * melodyChangeMeasure == 0\n      ) {\n        console.log('change')\n        melodyPart.clear()\n\n        if (melodyChangeRandom) {\n          console.log('random')\n\n          let notes = []\n\n          melodySettings.sequence.steps2.forEach((item, i) => {\n            notes.push(item.noteName)\n          })\n\n          notes = this.shuffle(notes)\n\n          let randomizedSequence = [...melodySettings.sequence.steps2]\n\n          randomizedSequence.forEach((step, i) => {\n            let newStep = Object.assign({}, step)\n            newStep.noteName = notes[i]\n            melodyPart.add(newStep)\n          })\n        } else {\n          melodySettings.sequence.steps2.forEach((step, i) => {\n            melodyPart.add(step)\n          })\n        }\n      } else if (\n        measure == melodyChangeMeasure + 1 ||\n        measure - squaresPassed * melodyChangeMeasure == 1\n      ) {\n        console.log('change back')\n        melodyPart.clear()\n\n        melodySettings.sequence.steps1.forEach((step, i) => {\n          melodyPart.add(step)\n        })\n      }\n    }\n  }\n\n  handleTransportChange = (property, value) => {\n    const { bpm } = this.state\n\n    switch (property) {\n      case 'play':\n        Tone.Transport.start()\n        Tone.Transport.scheduleRepeat(this.nextMeasure, '1m')\n\n        this.setState({\n          isStarted: true\n        })\n        break\n      case 'bpm':\n        Tone.Transport.bpm.value = value\n\n        this.setState({\n          bpm: value\n        })\n        break\n    }\n  }\n\n  handleValueChange = (instrumentName, property, value) => {\n    const { bassSettings, melodySettings } = this.state\n\n    let instrument\n    let chorus\n    let distortion\n    let pingPongDelay\n    let bitCrusher\n    let settings\n\n    if (instrumentName === 'bass') {\n      instrument = bassSynth\n      chorus = bassChorus\n      pingPongDelay = bassPingPongDelay\n      settings = bassSettings\n    } else if (instrumentName === 'melody') {\n      instrument = melodySynth\n      chorus = melodyChorus\n      distortion = melodyDistortion\n      pingPongDelay = melodyPingPongDelay\n      bitCrusher = melodyBitCrusher\n      settings = melodySettings\n    }\n\n    switch (property) {\n      case 'synthType':\n        instrument.oscillator.type = value\n        settings.synth.oscillator.type = value\n        break\n      case 'synthShowEnvelope':\n        settings.synthUI.envelopeShow = value\n        break\n      case 'synthEnvelopeAttack':\n        instrument.envelope.attack = value\n        settings.synth.envelope.attack = value\n        break\n      case 'synthEnvelopeDecay':\n        instrument.envelope.decay = value\n        settings.synth.envelope.decay = value\n        break\n      case 'synthEnvelopeSustain':\n        instrument.envelope.sustain = value\n        settings.synth.envelope.sustain = value\n        break\n      case 'synthEnvelopeRelease':\n        instrument.envelope.release = value\n        settings.synth.envelope.release = value\n        break\n      case 'chorusWet':\n        chorus.wet.value = value\n        settings.chorus.wet = value\n        break\n      case 'chorusType':\n        chorus.type = value\n        settings.chorus.type = value\n        break\n      case 'chorusFrequency':\n        chorus.frequency.value = value\n        settings.chorus.frequency = value\n        break\n      case 'chorusDelayTime':\n        chorus.delayTime = value\n        settings.chorus.delayTime = value\n        break\n      case 'chorusDepth':\n        chorus.depth = value\n        settings.chorus.depth = value\n        break\n      case 'chorusSpread':\n        chorus.spread = value\n        settings.chorus.spread = value\n        break\n      case 'distortionWet':\n        distortion.wet.value = value\n        settings.distortion.wet = value\n        break\n      case 'distortionDistortion':\n        distortion.distortion = value\n        settings.distortion.distortion = value\n        break\n      case 'distortionOversample':\n        distortion.oversample = value\n        settings.distortion.oversample = value\n        break\n      case 'bitCrusherWet':\n        bitCrusher.wet.value = value\n        settings.bitCrusher.wet = value\n        break\n      case 'bitCrusherBits':\n        bitCrusher.bits = value\n        settings.bitCrusher.bits = value\n        break\n      case 'pingPongDelayWet':\n        pingPongDelay.wet.value = value\n        settings.pingPongDelay.wet = value\n        break\n      case 'pingPongDelayDelayTime':\n        pingPongDelay.delayTime.value = value\n        settings.pingPongDelay.delayTime = value\n        break\n      case 'pingPongDelayMaxDelayTime':\n        pingPongDelay.maxDelayTime = value\n        settings.pingPongDelay.maxDelayTime = value\n        break\n    }\n\n    this.setState({\n      bassSettings,\n      melodySettings\n    })\n  }\n\n  handleMelodySoundPresetChange = (property, value) => {\n    const { melodySettings } = this.state\n    const preset = melodySettings.presets[value]\n\n    const instrument = melodySynth\n    const chorus = melodyChorus\n    const distortion = melodyDistortion\n    const pingPongDelay = melodyPingPongDelay\n    const bitCrusher = melodyBitCrusher\n    const settings = melodySettings\n\n    const { oscillator, envelope } = preset.synth\n\n    instrument.oscillator.type = oscillator.type\n    settings.synth.oscillator.type = oscillator.type\n\n    instrument.envelope.attack = envelope.attack\n    settings.synth.envelope.attack = envelope.attack\n\n    instrument.envelope.decay = envelope.decay\n    settings.synth.envelope.decay = envelope.decay\n\n    instrument.envelope.sustain = envelope.sustain\n    settings.synth.envelope.sustain = envelope.sustain\n\n    instrument.envelope.release = envelope.release\n    settings.synth.envelope.release = envelope.release\n\n    chorus.wet.value = preset.chorus.wet\n    settings.chorus.wet = preset.chorus.wet\n\n    chorus.type = preset.chorus.type\n    settings.chorus.type = preset.chorus.type\n\n    chorus.frequency.value = preset.chorus.frequency\n    settings.chorus.frequency = preset.chorus.frequency\n\n    chorus.delayTime = preset.chorus.delayTime\n    settings.chorus.delayTime = preset.chorus.delayTime\n\n    chorus.depth = preset.chorus.depth\n    settings.chorus.depth = preset.chorus.depth\n\n    chorus.spread = preset.chorus.spread\n    settings.chorus.spread = preset.chorus.spread\n\n    distortion.wet.value = preset.distortion.wet\n    settings.distortion.wet = preset.distortion.wet\n\n    distortion.distortion = preset.distortion.distortion\n    settings.distortion.distortion = preset.distortion.distortion\n\n    distortion.oversample = preset.distortion.oversample\n    settings.distortion.oversample = preset.distortion.oversample\n\n    bitCrusher.wet.value = preset.bitCrusher.wet\n    settings.bitCrusher.wet = preset.bitCrusher.wet\n\n    bitCrusher.bits = preset.bitCrusher.bits\n    settings.bitCrusher.bits = preset.bitCrusher.bits\n\n    pingPongDelay.wet.value = preset.pingPongDelay.wet\n    settings.pingPongDelay.wet = preset.pingPongDelay.wet\n\n    pingPongDelay.delayTime.value = preset.pingPongDelay.delayTime\n    settings.pingPongDelay.delayTime = preset.pingPongDelay.delayTime\n\n    pingPongDelay.maxDelayTime = preset.pingPongDelay.maxDelayTime\n    settings.pingPongDelay.maxDelayTime = preset.pingPongDelay.maxDelayTime\n\n    settings.presets.current = value\n\n    this.setState({\n      melodySettings\n    })\n  }\n\n  handleMelodySequenceChange = (property, value) => {\n    const { melodySettings } = this.state\n    const steps = melodySettings.sequence[value]\n\n    melodySettings.sequence.current = value\n    melodyPart.clear()\n\n    steps.forEach((step, i) => {\n      melodyPart.add(step)\n    })\n\n    this.setState({\n      melodySettings\n    })\n  }\n\n  handleDrumsValueChange = (property, value) => {\n    const { drumsSettings } = this.state\n\n    if (property === 'channelVolume') {\n      samplerChannel.volume.value = value\n      drumsSettings.channel.volume = value\n    } else if (property === 'channelMute') {\n      console.log(\n        '=====BEFORE=====',\n        drumsSettings.channel.mute,\n        samplerChannel.mute,\n        drumsSettings.channel.mute,\n        samplerChannel\n      )\n\n      const mute = !drumsSettings.channel.mute\n      samplerChannel.mute = mute\n      drumsSettings.channel.mute = mute\n\n      console.log(\n        '=====AFTER=====',\n        mute,\n        samplerChannel.mute,\n        drumsSettings.channel.mute,\n        samplerChannel\n      )\n    } else if (property === 'channelPan') {\n      samplerChannel.pan.value = value\n      drumsSettings.channel.pan = value\n    }\n\n    this.setState({\n      drumsSettings\n    })\n  }\n\n  handleToggleUIShow = () => {\n    const { isUIShown } = this.state\n\n    this.setState({\n      isUIShown: !isUIShown\n    })\n  }\n\n  renderStartButton = () => {\n    return (\n      <SC_Button\n        text=\"Art Design & Coding Community\"\n        handleClick={this.handleStart}\n      />\n    )\n  }\n\n  renderShowHideButton = () => {\n    return (\n      <div className=\"toggleUIButton\" onClick={this.handleToggleUIShow}>\n        Show/Hide UI\n      </div>\n    )\n  }\n\n  renderUI = () => {\n    const {\n      bpm,\n      melodyChangeMeasureSelect,\n      melodyChangeMeasure,\n      melodyChangeRandom,\n      melodyChange,\n      bassSettings,\n      melodySettings,\n      drumsSettings\n    } = this.state\n\n    const melodyChangeButtonText = melodyChange ? 'On' : 'Off'\n\n    return (\n      <div className=\"instrumentUI\">\n        <SC_Slider\n          name=\"BPM\"\n          min={0}\n          max={300}\n          step={1}\n          value={bpm}\n          property=\"bpm\"\n          handleChange={(property, value) => {\n            this.handleTransportChange(property, value)\n          }}\n        />\n\n        <br />\n\n        <div className=\"sampleButtonWrapper\">\n          <SC_Button\n            text=\"Sample\"\n            handleClick={() => {\n              sampler.triggerAttackRelease('A4', '1n')\n            }}\n          />\n        </div>\n\n        <ToneSynth\n          title=\"Bass Synth\"\n          instrumentName=\"bass\"\n          settings={bassSettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <PingPongDelayEffect\n          title=\"Ping Pong Delay\"\n          instrumentName=\"bass\"\n          settings={bassSettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <ChorusEffect\n          title=\"Chorus\"\n          instrumentName=\"bass\"\n          settings={bassSettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <ToneSynth\n          title=\"Melody Synth\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <br />\n\n        <SC_ToggleButtonSet\n          name=\"Sequence\"\n          options={['steps1', 'steps2']}\n          value={melodySettings.sequence.current}\n          property=\"melodySequence\"\n          handleChange={this.handleMelodySequenceChange}\n        />\n\n        <br />\n\n        <SC_ToggleButtonSet\n          name=\"Sound\"\n          options={['default', 'preset1', 'preset2']}\n          value={melodySettings.presets.current}\n          property=\"melodySoundPreset\"\n          handleChange={this.handleMelodySoundPresetChange}\n        />\n\n        <br />\n\n        <Select\n          name=\"Change melody on measure\"\n          options={[2, 4, 8, 16, 32]}\n          isOpened={melodyChangeMeasureSelect}\n          value={melodyChangeMeasure}\n          property=\"\"\n          handleMelodyChangeMeasureSelectOpen={\n            this.handleMelodyChangeMeasureSelectOpen\n          }\n          handleMelodyChangeMeasureSelectClose={\n            this.handleMelodyChangeMeasureSelectClose\n          }\n          handleChange={this.handleMelodyChangeMeasure}\n        />\n\n        <SC_ToggleButton\n          text={melodyChangeButtonText}\n          isOn={melodyChange}\n          handleClick={this.handleMelodyChange}\n        />\n\n        <br />\n\n        <SC_ToggleButton\n          text=\"Random\"\n          isOn={melodyChangeRandom}\n          handleClick={this.handleMelodyChangeRandom}\n        />\n\n        <br />\n\n        <ChorusEffect\n          title=\"Chorus\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <DistortionEffect\n          title=\"Distortion\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <BitCrusherEffect\n          title=\"BitCrusher\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <PingPongDelayEffect\n          title=\"Ping Pong Delay\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <Channel\n          settings={drumsSettings}\n          handleValueChange={this.handleDrumsValueChange}\n        />\n      </div>\n    )\n  }\n\n  render() {\n    const { isStarted, isUIShown } = this.state\n\n    return (\n      <div className=\"Container\">\n        {isStarted ? this.renderShowHideButton() : this.renderStartButton()}\n        {isUIShown ? this.renderUI() : ''}\n      </div>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}