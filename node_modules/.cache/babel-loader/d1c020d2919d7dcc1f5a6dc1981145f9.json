{"ast":null,"code":"var _jsxFileName = \"/Users/alicegurova/art-pactice/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_14/Container.jsx\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as Tone from 'tone';\nimport React, { Component } from 'react';\nimport * as melodySettings from './tunes/melody.js';\nimport * as kotoSettings from './tunes/koto.js';\nimport ToneSynth from './modules/ToneSynth.jsx';\nimport ChorusEffect from './modules/ChorusEffect.jsx';\nimport DistortionEffect from './modules/DistortionEffect.jsx';\nimport BitCrusherEffect from './modules/BitCrusherEffect.jsx';\nimport PingPongDelayEffect from './modules/PingPongDelayEffect.jsx';\nimport Channel from './modules/Channel.jsx';\nimport SC_ToggleButtonSet from './components/SC_ToggleButtonSet.jsx';\nimport SC_ToggleButton from './components/SC_ToggleButton';\nimport SC_Button from './components/SC_Button';\nimport SC_Slider from './components/SC_Slider';\nimport SC_Knob from './components/SC_Knob';\nimport Surface from './components/Surface';\nimport Select from './components/Select';\nvar kotoChannel;\nvar melodySynth;\nvar melodyChorus;\nvar melodyDistortion;\nvar melodyBitCrusher;\nvar melodyPingPongDelay;\nvar melodyPart;\nvar sampler;\nvar samplerChannel;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.shuffle = function (array) {\n      var currentIndex = array.length,\n          randomIndex; // While there remain elements to shuffle.\n\n      while (currentIndex != 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex-- // And swap it with the current element.\n        // prettier-ignore\n        ;\n        var _ref = [array[randomIndex], array[currentIndex]];\n        array[currentIndex] = _ref[0];\n        array[randomIndex] = _ref[1];\n      }\n\n      return array;\n    };\n\n    _this.handleMelodyChangeMeasureSelectClose = function (e) {\n      console.log('handleMelodyChangeMeasureSelectClose');\n      var isUIShown = _this.state.isUIShown;\n\n      if (e.target.classList[0] != 'currentValue') {\n        _this.setState({\n          melodyChangeMeasureSelect: false\n        });\n      }\n    };\n\n    _this.handleMelodyChangeMeasureSelectOpen = function () {\n      console.log('handleMelodyChangeMeasureSelectOpen');\n\n      _this.setState({\n        melodyChangeMeasureSelect: true\n      });\n    };\n\n    _this.handleMelodyChangeMeasure = function (property, value) {\n      _this.setState({\n        melodyChangeMeasureSelect: false,\n        melodyChangeMeasure: value\n      });\n    };\n\n    _this.handleMelodyChangeRandom = function () {\n      var melodyChangeRandom = _this.state.melodyChangeRandom;\n\n      _this.setState({\n        melodyChangeRandom: !melodyChangeRandom\n      });\n    };\n\n    _this.handleMelodyChange = function () {\n      var melodyChange = _this.state.melodyChange;\n\n      _this.setState({\n        melodyChange: !melodyChange\n      });\n    };\n\n    _this.handleStart = function () {\n      var _this$state = _this.state,\n          melodySettings = _this$state.melodySettings,\n          kotoSettings = _this$state.kotoSettings; //\n      //\n      //\n\n      melodySynth = new Tone.Synth(melodySettings.synth);\n      melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n      melodyDistortion = new Tone.Distortion(melodySettings.distortion);\n      melodyBitCrusher = new Tone.BitCrusher(melodySettings.bitCrusher);\n      melodyPingPongDelay = new Tone.PingPongDelay(melodySettings.pingPongDelay).toDestination();\n      melodySynth.chain(melodyChorus, melodyDistortion, melodyBitCrusher, melodyPingPongDelay);\n      melodyPart = new Tone.Part(function (time, note) {\n        melodySynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, melodySettings.sequence[melodySettings.sequence.current]).start(0);\n      melodyPart.loopEnd = melodySettings.sequence.duration;\n      melodyPart.loop = true;\n      sampler = new Tone.Sampler({\n        urls: {\n          A1: 'koto-japanese-melody-strings-loop_123bpm_D_minor.wav',\n          A2: 'spanish-guitar-koto-arp-loop_234bpm_F_minor.wav',\n          A3: 'sharingan-koto-melody_130bpm_A_minor.wav',\n          B1: 'spanish-guitar-koto-arp-loop_234bpm_F_minor.wav'\n        },\n        baseUrl: 'http://localhost:3000/samples/'\n      });\n      samplerChannel = new Tone.Channel(kotoSettings.channel).toDestination();\n      sampler.chain(samplerChannel);\n      var kotoPart = new Tone.Part(function (time, note) {\n        sampler.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, kotoSettings.sequence.steps).start(0);\n      kotoPart.loopEnd = kotoSettings.sequence.duration;\n      kotoPart.loop = kotoSettings.sequence.loop;\n\n      _this.handleTransportChange('play', true);\n    };\n\n    _this.nextMeasure = function () {\n      var _this$state2 = _this.state,\n          melodyChangeMeasure = _this$state2.melodyChangeMeasure,\n          melodyChangeRandom = _this$state2.melodyChangeRandom,\n          melodyChange = _this$state2.melodyChange;\n\n      if (melodyChange) {\n        var position = Tone.Transport.position;\n        var regexBefore = /([\\w]+)/;\n        var measure = parseInt(position.match(regexBefore)[1]) + 1;\n        console.log('next measure', measure);\n        var squaresPassed = Math.floor(measure / melodyChangeMeasure);\n\n        if (measure == melodyChangeMeasure || measure - squaresPassed * melodyChangeMeasure == 0) {\n          console.log('change');\n          melodyPart.clear();\n\n          if (melodyChangeRandom) {\n            console.log('random');\n            var notes = [];\n            melodySettings.sequence.steps2.forEach(function (item, i) {\n              notes.push(item.noteName);\n            });\n            notes = _this.shuffle(notes);\n\n            var randomizedSequence = _toConsumableArray(melodySettings.sequence.steps2);\n\n            randomizedSequence.forEach(function (step, i) {\n              var newStep = Object.assign({}, step);\n              newStep.noteName = notes[i];\n              melodyPart.add(newStep);\n            });\n          } else {\n            melodySettings.sequence.steps2.forEach(function (step, i) {\n              melodyPart.add(step);\n            });\n          }\n        } else if (measure == melodyChangeMeasure + 1 || measure - squaresPassed * melodyChangeMeasure == 1) {\n          console.log('change back');\n          melodyPart.clear();\n          melodySettings.sequence.steps1.forEach(function (step, i) {\n            melodyPart.add(step);\n          });\n        }\n      }\n    };\n\n    _this.handleTransportChange = function (property, value) {\n      var bpm = _this.state.bpm;\n\n      switch (property) {\n        case 'play':\n          Tone.Transport.start();\n          Tone.Transport.scheduleRepeat(_this.nextMeasure, '1m');\n\n          _this.setState({\n            isStarted: true\n          });\n\n          break;\n\n        case 'bpm':\n          Tone.Transport.bpm.value = value;\n\n          _this.setState({\n            bpm: value\n          });\n\n          break;\n      }\n    };\n\n    _this.handleValueChange = function (instrumentName, property, value) {\n      var _this$state3 = _this.state,\n          bassSettings = _this$state3.bassSettings,\n          melodySettings = _this$state3.melodySettings;\n      var instrument;\n      var chorus;\n      var distortion;\n      var pingPongDelay;\n      var bitCrusher;\n      var settings;\n\n      if (instrumentName === 'melody') {\n        instrument = melodySynth;\n        chorus = melodyChorus;\n        distortion = melodyDistortion;\n        pingPongDelay = melodyPingPongDelay;\n        bitCrusher = melodyBitCrusher;\n        settings = melodySettings;\n      }\n\n      switch (property) {\n        case 'synthType':\n          instrument.oscillator.type = value;\n          settings.synth.oscillator.type = value;\n          break;\n\n        case 'synthShowEnvelope':\n          settings.synthUI.envelopeShow = value;\n          break;\n\n        case 'synthEnvelopeAttack':\n          instrument.envelope.attack = value;\n          settings.synth.envelope.attack = value;\n          break;\n\n        case 'synthEnvelopeDecay':\n          instrument.envelope.decay = value;\n          settings.synth.envelope.decay = value;\n          break;\n\n        case 'synthEnvelopeSustain':\n          instrument.envelope.sustain = value;\n          settings.synth.envelope.sustain = value;\n          break;\n\n        case 'synthEnvelopeRelease':\n          instrument.envelope.release = value;\n          settings.synth.envelope.release = value;\n          break;\n\n        case 'chorusWet':\n          chorus.wet.value = value;\n          settings.chorus.wet = value;\n          break;\n\n        case 'chorusType':\n          chorus.type = value;\n          settings.chorus.type = value;\n          break;\n\n        case 'chorusFrequency':\n          chorus.frequency.value = value;\n          settings.chorus.frequency = value;\n          break;\n\n        case 'chorusDelayTime':\n          chorus.delayTime = value;\n          settings.chorus.delayTime = value;\n          break;\n\n        case 'chorusDepth':\n          chorus.depth = value;\n          settings.chorus.depth = value;\n          break;\n\n        case 'chorusSpread':\n          chorus.spread = value;\n          settings.chorus.spread = value;\n          break;\n\n        case 'distortionWet':\n          distortion.wet.value = value;\n          settings.distortion.wet = value;\n          break;\n\n        case 'distortionDistortion':\n          distortion.distortion = value;\n          settings.distortion.distortion = value;\n          break;\n\n        case 'distortionOversample':\n          distortion.oversample = value;\n          settings.distortion.oversample = value;\n          break;\n\n        case 'bitCrusherWet':\n          bitCrusher.wet.value = value;\n          settings.bitCrusher.wet = value;\n          break;\n\n        case 'bitCrusherBits':\n          bitCrusher.bits = value;\n          settings.bitCrusher.bits = value;\n          break;\n\n        case 'pingPongDelayWet':\n          pingPongDelay.wet.value = value;\n          settings.pingPongDelay.wet = value;\n          break;\n\n        case 'pingPongDelayDelayTime':\n          pingPongDelay.delayTime.value = value;\n          settings.pingPongDelay.delayTime = value;\n          break;\n\n        case 'pingPongDelayMaxDelayTime':\n          pingPongDelay.maxDelayTime = value;\n          settings.pingPongDelay.maxDelayTime = value;\n          break;\n      }\n\n      _this.setState({\n        bassSettings: bassSettings,\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleKotoValueChange = function (property, value) {\n      var kotoSettings = _this.state.kotoSettings;\n\n      if (property === 'channelVolume') {\n        samplerChannel.volume.value = value;\n        kotoSettings.channel.volume = value;\n      } else if (property === 'channelMute') {\n        console.log('=====BEFORE=====', kotoSettings.channel.mute, samplerChannel.mute, kotoSettings.channel.mute, samplerChannel);\n        var mute = !kotoSettings.channel.mute;\n        samplerChannel.mute = mute;\n        kotoSettings.channel.mute = mute;\n        console.log('=====AFTER=====', mute, samplerChannel.mute, kotoSettings.channel.mute, samplerChannel);\n      } else if (property === 'channelPan') {\n        samplerChannel.pan.value = value;\n        kotoSettings.channel.pan = value;\n      }\n\n      _this.setState({\n        kotoSettings: kotoSettings\n      });\n    };\n\n    _this.handleToggleUIShow = function () {\n      var isUIShown = _this.state.isUIShown;\n\n      _this.setState({\n        isUIShown: !isUIShown\n      });\n    };\n\n    _this.renderStartButton = function () {\n      return /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"Art Design & Coding Community\",\n        handleClick: _this.handleStart,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this.renderShowHideButton = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toggleUIButton\",\n        onClick: _this.handleToggleUIShow,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 7\n        }\n      }, \"Show/Hide UI\");\n    };\n\n    _this.renderUI = function () {\n      var _this$state4 = _this.state,\n          bpm = _this$state4.bpm,\n          melodyChangeMeasureSelect = _this$state4.melodyChangeMeasureSelect,\n          melodyChangeMeasure = _this$state4.melodyChangeMeasure,\n          melodyChangeRandom = _this$state4.melodyChangeRandom,\n          melodyChange = _this$state4.melodyChange,\n          melodySettings = _this$state4.melodySettings,\n          kotoSettings = _this$state4.kotoSettings;\n      var melodyChangeButtonText = melodyChange ? 'On' : 'Off';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"instrumentUI\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"BPM\",\n        min: 0,\n        max: 300,\n        step: 1,\n        value: bpm,\n        property: \"bpm\",\n        handleChange: function handleChange(property, value) {\n          _this.handleTransportChange(property, value);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sampleButtonWrapper\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"Sample\",\n        handleClick: function handleClick() {\n          sampler.triggerAttackRelease('A4', '1n');\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(PingPongDelayEffect, {\n        title: \"Ping Pong Delay\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ChorusEffect, {\n        title: \"Chorus\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ToneSynth, {\n        title: \"Melody Synth\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Select, {\n        name: \"Change melody on measure\",\n        options: [2, 4, 8, 16, 32],\n        isOpened: melodyChangeMeasureSelect,\n        value: melodyChangeMeasure,\n        property: \"\",\n        handleMelodyChangeMeasureSelectOpen: _this.handleMelodyChangeMeasureSelectOpen,\n        handleMelodyChangeMeasureSelectClose: _this.handleMelodyChangeMeasureSelectClose,\n        handleChange: _this.handleMelodyChangeMeasure,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButton, {\n        text: melodyChangeButtonText,\n        isOn: melodyChange,\n        handleClick: _this.handleMelodyChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButton, {\n        text: \"Random\",\n        isOn: melodyChangeRandom,\n        handleClick: _this.handleMelodyChangeRandom,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ChorusEffect, {\n        title: \"Chorus\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(DistortionEffect, {\n        title: \"Distortion\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(BitCrusherEffect, {\n        title: \"BitCrusher\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(PingPongDelayEffect, {\n        title: \"Ping Pong Delay\",\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Channel, {\n        settings: kotoSettings,\n        handleValueChange: _this.handleKotoValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.state = {\n      isStarted: false,\n      isUIShown: false,\n      bpm: 80,\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: 8,\n      melodyChangeRandom: false,\n      melodyChange: false,\n      random: false,\n      melodySettings: melodySettings,\n      kotoSettings: kotoSettings\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('keydown', this.handleKeydown);\n      document.addEventListener('click', this.handleMelodyChangeMeasureSelectClose);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          isStarted = _this$state5.isStarted,\n          isUIShown = _this$state5.isUIShown;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 7\n        }\n      }, isStarted ? this.renderShowHideButton() : this.renderStartButton(), isUIShown ? this.renderUI() : '');\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport { Container as default };","map":{"version":3,"names":["Tone","React","Component","melodySettings","kotoSettings","ToneSynth","ChorusEffect","DistortionEffect","BitCrusherEffect","PingPongDelayEffect","Channel","SC_ToggleButtonSet","SC_ToggleButton","SC_Button","SC_Slider","SC_Knob","Surface","Select","kotoChannel","melodySynth","melodyChorus","melodyDistortion","melodyBitCrusher","melodyPingPongDelay","melodyPart","sampler","samplerChannel","Container","props","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","handleMelodyChangeMeasureSelectClose","e","console","log","isUIShown","state","target","classList","setState","melodyChangeMeasureSelect","handleMelodyChangeMeasureSelectOpen","handleMelodyChangeMeasure","property","value","melodyChangeMeasure","handleMelodyChangeRandom","melodyChangeRandom","handleMelodyChange","melodyChange","handleStart","Synth","synth","Chorus","chorus","start","Distortion","distortion","BitCrusher","bitCrusher","PingPongDelay","pingPongDelay","toDestination","chain","Part","time","note","triggerAttackRelease","noteName","duration","velocity","sequence","current","loopEnd","loop","Sampler","urls","A1","A2","A3","B1","baseUrl","channel","kotoPart","steps","handleTransportChange","nextMeasure","position","Transport","regexBefore","measure","parseInt","match","squaresPassed","clear","notes","steps2","forEach","item","i","push","randomizedSequence","step","newStep","Object","assign","add","steps1","bpm","scheduleRepeat","isStarted","handleValueChange","instrumentName","bassSettings","instrument","settings","oscillator","type","synthUI","envelopeShow","envelope","attack","decay","sustain","release","wet","frequency","delayTime","depth","spread","oversample","bits","maxDelayTime","handleKotoValueChange","volume","mute","pan","handleToggleUIShow","renderStartButton","renderShowHideButton","renderUI","melodyChangeButtonText","document","addEventListener","handleKeydown"],"sources":["/Users/alicegurova/art-pactice/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_14/Container.jsx"],"sourcesContent":["import * as Tone from 'tone'\nimport React, { Component } from 'react'\n\n\nimport * as melodySettings from './tunes/melody.js'\nimport * as kotoSettings from './tunes/koto.js'\n\nimport ToneSynth from './modules/ToneSynth.jsx'\nimport ChorusEffect from './modules/ChorusEffect.jsx'\nimport DistortionEffect from './modules/DistortionEffect.jsx'\nimport BitCrusherEffect from './modules/BitCrusherEffect.jsx'\nimport PingPongDelayEffect from './modules/PingPongDelayEffect.jsx'\nimport Channel from './modules/Channel.jsx'\n\nimport SC_ToggleButtonSet from './components/SC_ToggleButtonSet.jsx'\nimport SC_ToggleButton from './components/SC_ToggleButton'\nimport SC_Button from './components/SC_Button'\nimport SC_Slider from './components/SC_Slider'\nimport SC_Knob from './components/SC_Knob'\nimport Surface from './components/Surface'\nimport Select from './components/Select'\n\nlet kotoChannel\n\nlet melodySynth\nlet melodyChorus\nlet melodyDistortion\nlet melodyBitCrusher\nlet melodyPingPongDelay\nlet melodyPart\n\nlet sampler\nlet samplerChannel\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isStarted: false,\n      isUIShown: false,\n      bpm: 80,\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: 8,\n      melodyChangeRandom: false,\n      melodyChange: false,\n      random: false,\n      melodySettings,\n      kotoSettings\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeydown)\n\n    document.addEventListener(\n      'click',\n      this.handleMelodyChangeMeasureSelectClose\n    )\n  }\n\n  shuffle = (array) => {\n    let currentIndex = array.length,\n      randomIndex\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex--\n\n      // And swap it with the current element.\n      // prettier-ignore\n      ;[array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex]\n      ]\n    }\n\n    return array\n  }\n\n  handleMelodyChangeMeasureSelectClose = (e) => {\n    console.log('handleMelodyChangeMeasureSelectClose')\n    const { isUIShown } = this.state\n\n    \n    if (e.target.classList[0] != 'currentValue') {\n      this.setState({\n        melodyChangeMeasureSelect: false\n      })\n    }\n  }\n\n  handleMelodyChangeMeasureSelectOpen = () => {\n    console.log('handleMelodyChangeMeasureSelectOpen')\n\n    this.setState({\n      melodyChangeMeasureSelect: true\n    })\n  }\n\n  handleMelodyChangeMeasure = (property, value) => {\n    this.setState({\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: value\n    })\n  }\n\n  handleMelodyChangeRandom = () => {\n    const { melodyChangeRandom } = this.state\n\n    this.setState({\n      melodyChangeRandom: !melodyChangeRandom\n    })\n  }\n\n  handleMelodyChange = () => {\n    const { melodyChange } = this.state\n\n    this.setState({\n      melodyChange: !melodyChange\n    })\n  }\n\n  \n\n  handleStart = () => {\n    const { melodySettings, kotoSettings } = this.state\n\n    //\n    //\n    //\n    melodySynth = new Tone.Synth(melodySettings.synth)\n    melodyChorus = new Tone.Chorus(melodySettings.chorus).start()\n    melodyDistortion = new Tone.Distortion(melodySettings.distortion)\n    melodyBitCrusher = new Tone.BitCrusher(melodySettings.bitCrusher)\n\n    melodyPingPongDelay = new Tone.PingPongDelay(\n      melodySettings.pingPongDelay\n    ).toDestination()\n\n    melodySynth.chain(\n      melodyChorus,\n      melodyDistortion,\n      melodyBitCrusher,\n      melodyPingPongDelay\n    )\n\n    melodyPart = new Tone.Part((time, note) => {\n      melodySynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, melodySettings.sequence[melodySettings.sequence.current]).start(0)\n\n    melodyPart.loopEnd = melodySettings.sequence.duration\n    melodyPart.loop = true\n   \n    \n    sampler = new Tone.Sampler({\n      urls: {\n        A1: 'koto-japanese-melody-strings-loop_123bpm_D_minor.wav',\n        A2: 'spanish-guitar-koto-arp-loop_234bpm_F_minor.wav',\n        A3: 'sharingan-koto-melody_130bpm_A_minor.wav',\n        B1: 'spanish-guitar-koto-arp-loop_234bpm_F_minor.wav'\n      },\n      baseUrl: 'http://localhost:3000/samples/'\n      \n    })\n\n    samplerChannel = new Tone.Channel(kotoSettings.channel).toDestination()\n\n    sampler.chain(samplerChannel)\n\n    const kotoPart = new Tone.Part((time, note) => {\n      sampler.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, kotoSettings.sequence.steps).start(0)\n\n    kotoPart.loopEnd = kotoSettings.sequence.duration\n    kotoPart.loop = kotoSettings.sequence.loop\n\n    this.handleTransportChange('play', true)\n  }\n\n  nextMeasure = () => {\n    const { melodyChangeMeasure, melodyChangeRandom, melodyChange } = this.state\n\n    if (melodyChange) {\n      const position = Tone.Transport.position\n      const regexBefore = /([\\w]+)/\n      let measure = parseInt(position.match(regexBefore)[1]) + 1\n      console.log('next measure', measure)\n\n      const squaresPassed = Math.floor(measure / melodyChangeMeasure)\n\n      if (\n        measure == melodyChangeMeasure ||\n        measure - squaresPassed * melodyChangeMeasure == 0\n      ) {\n        console.log('change')\n        melodyPart.clear()\n\n        if (melodyChangeRandom) {\n          console.log('random')\n\n          let notes = []\n\n          melodySettings.sequence.steps2.forEach((item, i) => {\n            notes.push(item.noteName)\n          })\n\n          notes = this.shuffle(notes)\n\n          let randomizedSequence = [...melodySettings.sequence.steps2]\n\n          randomizedSequence.forEach((step, i) => {\n            let newStep = Object.assign({}, step)\n            newStep.noteName = notes[i]\n            melodyPart.add(newStep)\n          })\n        } else {\n          melodySettings.sequence.steps2.forEach((step, i) => {\n            melodyPart.add(step)\n          })\n        }\n      } else if (\n        measure == melodyChangeMeasure + 1 ||\n        measure - squaresPassed * melodyChangeMeasure == 1\n      ) {\n        console.log('change back')\n        melodyPart.clear()\n\n        melodySettings.sequence.steps1.forEach((step, i) => {\n          melodyPart.add(step)\n        })\n      }\n    }\n  }\n\n  handleTransportChange = (property, value) => {\n    const { bpm } = this.state\n\n    switch (property) {\n      case 'play':\n        Tone.Transport.start()\n        Tone.Transport.scheduleRepeat(this.nextMeasure, '1m')\n\n        this.setState({\n          isStarted: true\n        })\n        break\n      case 'bpm':\n        Tone.Transport.bpm.value = value\n\n        this.setState({\n          bpm: value\n        })\n        break\n    }\n  }\n\n  handleValueChange = (instrumentName, property, value) => {\n    const { bassSettings, melodySettings } = this.state\n\n    let instrument\n    let chorus\n    let distortion\n    let pingPongDelay\n    let bitCrusher\n    let settings\n\n    if (instrumentName === 'melody') {\n      instrument = melodySynth\n      chorus = melodyChorus\n      distortion = melodyDistortion\n      pingPongDelay = melodyPingPongDelay\n      bitCrusher = melodyBitCrusher\n      settings = melodySettings\n    }\n\n    switch (property) {\n      case 'synthType':\n        instrument.oscillator.type = value\n        settings.synth.oscillator.type = value\n        break\n      case 'synthShowEnvelope':\n        settings.synthUI.envelopeShow = value\n        break\n      case 'synthEnvelopeAttack':\n        instrument.envelope.attack = value\n        settings.synth.envelope.attack = value\n        break\n      case 'synthEnvelopeDecay':\n        instrument.envelope.decay = value\n        settings.synth.envelope.decay = value\n        break\n      case 'synthEnvelopeSustain':\n        instrument.envelope.sustain = value\n        settings.synth.envelope.sustain = value\n        break\n      case 'synthEnvelopeRelease':\n        instrument.envelope.release = value\n        settings.synth.envelope.release = value\n        break\n      case 'chorusWet':\n        chorus.wet.value = value\n        settings.chorus.wet = value\n        break\n      case 'chorusType':\n        chorus.type = value\n        settings.chorus.type = value\n        break\n      case 'chorusFrequency':\n        chorus.frequency.value = value\n        settings.chorus.frequency = value\n        break\n      case 'chorusDelayTime':\n        chorus.delayTime = value\n        settings.chorus.delayTime = value\n        break\n      case 'chorusDepth':\n        chorus.depth = value\n        settings.chorus.depth = value\n        break\n      case 'chorusSpread':\n        chorus.spread = value\n        settings.chorus.spread = value\n        break\n      case 'distortionWet':\n        distortion.wet.value = value\n        settings.distortion.wet = value\n        break\n      case 'distortionDistortion':\n        distortion.distortion = value\n        settings.distortion.distortion = value\n        break\n      case 'distortionOversample':\n        distortion.oversample = value\n        settings.distortion.oversample = value\n        break\n      case 'bitCrusherWet':\n        bitCrusher.wet.value = value\n        settings.bitCrusher.wet = value\n        break\n      case 'bitCrusherBits':\n        bitCrusher.bits = value\n        settings.bitCrusher.bits = value\n        break\n      case 'pingPongDelayWet':\n        pingPongDelay.wet.value = value\n        settings.pingPongDelay.wet = value\n        break\n      case 'pingPongDelayDelayTime':\n        pingPongDelay.delayTime.value = value\n        settings.pingPongDelay.delayTime = value\n        break\n      case 'pingPongDelayMaxDelayTime':\n        pingPongDelay.maxDelayTime = value\n        settings.pingPongDelay.maxDelayTime = value\n        break\n    }\n\n    this.setState({\n      bassSettings,\n      melodySettings\n    })\n  }\n\n  \n\n\n  handleKotoValueChange = (property, value) => {\n    const { kotoSettings } = this.state\n\n    if (property === 'channelVolume') {\n      samplerChannel.volume.value = value\n      kotoSettings.channel.volume = value\n    } else if (property === 'channelMute') {\n      console.log(\n        '=====BEFORE=====',\n        kotoSettings.channel.mute,\n        samplerChannel.mute,\n        kotoSettings.channel.mute,\n        samplerChannel\n      )\n\n      const mute = !kotoSettings.channel.mute\n      samplerChannel.mute = mute\n      kotoSettings.channel.mute = mute\n\n      console.log(\n        '=====AFTER=====',\n        mute,\n        samplerChannel.mute,\n        kotoSettings.channel.mute,\n        samplerChannel\n      )\n    } else if (property === 'channelPan') {\n      samplerChannel.pan.value = value\n      kotoSettings.channel.pan = value\n    }\n\n    this.setState({\n      kotoSettings\n    })\n  }\n\n  handleToggleUIShow = () => {\n    const { isUIShown } = this.state\n\n    this.setState({\n      isUIShown: !isUIShown\n    })\n  }\n\n  renderStartButton = () => {\n    return (\n      <SC_Button\n        text=\"Art Design & Coding Community\"\n        handleClick={this.handleStart}\n      />\n    )\n  }\n\n  renderShowHideButton = () => {\n    return (\n      <div className=\"toggleUIButton\" onClick={this.handleToggleUIShow}>\n        Show/Hide UI\n      </div>\n    )\n  }\n\n  renderUI = () => {\n    const {\n      bpm,\n      melodyChangeMeasureSelect,\n      melodyChangeMeasure,\n      melodyChangeRandom,\n      melodyChange,\n      melodySettings,\n      kotoSettings\n    } = this.state\n\n    const melodyChangeButtonText = melodyChange ? 'On' : 'Off'\n\n    return (\n      <div className=\"instrumentUI\">\n        <SC_Slider\n          name=\"BPM\"\n          min={0}\n          max={300}\n          step={1}\n          value={bpm}\n          property=\"bpm\"\n          handleChange={(property, value) => {\n            this.handleTransportChange(property, value)\n          }}\n        />\n\n        <br />\n\n        <div className=\"sampleButtonWrapper\">\n          <SC_Button\n            text=\"Sample\"\n            handleClick={() => {\n              sampler.triggerAttackRelease('A4', '1n')\n            }}\n          />\n        </div>\n\n        \n\n        <PingPongDelayEffect\n          title=\"Ping Pong Delay\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <ChorusEffect\n          title=\"Chorus\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <ToneSynth\n          title=\"Melody Synth\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <br />\n\n        \n\n        <br />\n\n        <Select\n          name=\"Change melody on measure\"\n          options={[2, 4, 8, 16, 32]}\n          isOpened={melodyChangeMeasureSelect}\n          value={melodyChangeMeasure}\n          property=\"\"\n          handleMelodyChangeMeasureSelectOpen={\n            this.handleMelodyChangeMeasureSelectOpen\n          }\n          handleMelodyChangeMeasureSelectClose={\n            this.handleMelodyChangeMeasureSelectClose\n          }\n          handleChange={this.handleMelodyChangeMeasure}\n        />\n\n        <SC_ToggleButton\n          text={melodyChangeButtonText}\n          isOn={melodyChange}\n          handleClick={this.handleMelodyChange}\n        />\n\n        <br />\n\n        <SC_ToggleButton\n          text=\"Random\"\n          isOn={melodyChangeRandom}\n          handleClick={this.handleMelodyChangeRandom}\n        />\n\n        <br />\n\n        <ChorusEffect\n          title=\"Chorus\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <DistortionEffect\n          title=\"Distortion\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <BitCrusherEffect\n          title=\"BitCrusher\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <PingPongDelayEffect\n          title=\"Ping Pong Delay\"\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <Channel\n          settings={kotoSettings}\n          handleValueChange={this.handleKotoValueChange}\n        />\n      </div>\n    )\n  }\n\n  render() {\n    const { isStarted, isUIShown } = this.state\n\n    return (\n      <div className=\"Container\">\n        {isStarted ? this.renderShowHideButton() : this.renderStartButton()}\n        {isUIShown ? this.renderUI() : ''}\n      </div>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}