{"ast":null,"code":"import * as Tone from 'tone';\nimport { generateUniqId } from '../utilities';\nimport { loadSamples } from './drum_samples_buffer';\nvar samples = loadSamples();\n\nfunction generateScale() {\n  var keys = [];\n\n  for (var step = 0; step < 5; step++) {\n    var octave = step < 5 ? 0 : Math.floor(step / 5);\n    var position = step < 5 ? step + 1 : step + 1 - octave * 5;\n    var note = void 0;\n\n    switch (position) {\n      case 1:\n        note = \"A\".concat(octave);\n        break;\n\n      case 2:\n        note = \"B\".concat(octave);\n        break;\n\n      case 3:\n        note = \"C\".concat(octave);\n        break;\n\n      case 4:\n        note = \"D\".concat(octave);\n        break;\n\n      case 5:\n        note = \"E\".concat(octave);\n        break;\n    }\n\n    keys.push(note);\n  }\n\n  return keys;\n}\n\nfunction getBufferedSampleUrls() {\n  var bufferedSampleUrls = {};\n  var scale = generateScale();\n  scale.forEach(function (key, i) {\n    bufferedSampleUrls[key] = samples[i];\n  });\n  return bufferedSampleUrls;\n}\n\nvar samplerSettings = {\n  volume: 0,\n  attack: 0,\n  release: 0,\n  curve: 'linear',\n  urls: getBufferedSampleUrls(),\n  baseUrl: 'http://localhost:3000'\n};\nvar freeverbSettings = {\n  wet: 0.9,\n  roomSize: 0.08,\n  dampening: 40\n};\nvar channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n};\nvar autoFilterSettings = {\n  wet: 0,\n  type: 'sine',\n  frequency: 1,\n  depth: 1,\n  baseFrequency: 200,\n  octaves: 2.6,\n  filter: {\n    type: 'lowpass',\n    frequency: 100,\n    rolloff: -12,\n    Q: 1\n  }\n};\nvar samplerNode = new Tone.Sampler(samplerSettings);\nvar autoFilterNode = new Tone.AutoFilter(autoFilterSettings).start();\nvar freeverbNode = new Tone.Freeverb(freeverbSettings);\nvar channelNode = new Tone.Channel(channelSettings).toDestination();\nsamplerNode.chain(freeverbNode, channelNode, autoFilterNode);\nvar v = 1;\nvar d = '4n';\nvar partSettings = {\n  scale: generateScale(),\n  sequence: [{\n    time: '0:0:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '0:1:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '0:2:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '0:3:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '1:0:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '1:1:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '1:2:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }, {\n    time: '1:3:0',\n    noteName: 'A1',\n    duration: d,\n    velocity: v\n  }]\n};\nvar partNode = new Tone.Part(function (time, note) {\n  samplerNode.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n}, []);\npartNode.loopEnd = '2m';\npartNode.loop = true;\nvar instrument = [{\n  id: generateUniqId(),\n  name: 'Sequencer',\n  type: 'Sequencer',\n  node: partNode,\n  settings: partSettings\n}, {\n  id: generateUniqId(),\n  name: 'Drum Sampler',\n  type: 'Sampler',\n  node: samplerNode,\n  settings: samplerSettings\n}, {\n  id: generateUniqId(),\n  name: 'Freeverb',\n  type: 'FreeverbEffect',\n  node: freeverbNode,\n  settings: freeverbSettings\n}, {\n  id: generateUniqId(),\n  name: 'Channel',\n  type: 'Channel',\n  node: channelNode,\n  settings: channelSettings\n}, {\n  id: generateUniqId(),\n  name: 'Auto Filter',\n  type: 'AutoFilterEffect',\n  node: autoFilterNode,\n  settings: autoFilterSettings\n}];\nexport { instrument };","map":{"version":3,"names":["Tone","generateUniqId","loadSamples","samples","generateScale","keys","step","octave","Math","floor","position","note","push","getBufferedSampleUrls","bufferedSampleUrls","scale","forEach","key","i","samplerSettings","volume","attack","release","curve","urls","baseUrl","freeverbSettings","wet","roomSize","dampening","channelSettings","pan","mute","solo","autoFilterSettings","type","frequency","depth","baseFrequency","octaves","filter","rolloff","Q","samplerNode","Sampler","autoFilterNode","AutoFilter","start","freeverbNode","Freeverb","channelNode","Channel","toDestination","chain","v","d","partSettings","sequence","time","noteName","duration","velocity","partNode","Part","triggerAttackRelease","loopEnd","loop","instrument","id","name","node","settings"],"sources":["/Users/alicegurova/art-pactice/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_10/tunes/drum_sampler.js"],"sourcesContent":["import * as Tone from 'tone'\nimport { generateUniqId } from '../utilities'\nimport { loadSamples } from './drum_samples_buffer'\n\nconst samples = loadSamples()\n\nfunction generateScale() {\n  const keys = []\n\n  for (let step = 0; step < 5; step++) {\n    const octave = step < 5 ? 0 : Math.floor(step / 5)\n    const position = step < 5 ? step + 1 : step + 1 - octave * 5\n    let note\n\n    switch (position) {\n      case 1:\n        note = `A${octave}`\n        break\n      case 2:\n        note = `B${octave}`\n        break\n      case 3:\n        note = `C${octave}`\n        break\n      case 4:\n        note = `D${octave}`\n        break\n      case 5:\n        note = `E${octave}`\n        break\n    }\n\n    keys.push(note)\n  }\n\n  return keys\n}\n\nfunction getBufferedSampleUrls() {\n  const bufferedSampleUrls = {}\n  const scale = generateScale()\n\n  scale.forEach((key, i) => {\n    bufferedSampleUrls[key] = samples[i]\n  })\n\n  return bufferedSampleUrls\n}\n\nconst samplerSettings = {\n  volume: 0,\n  attack: 0,\n  release: 0,\n  curve: 'linear',\n  urls: getBufferedSampleUrls(),\n  baseUrl: 'http://localhost:3000'\n}\n\nconst freeverbSettings = {\n  wet: 0.9,\n  roomSize: 0.08,\n  dampening: 40\n}\n\nconst channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n}\n\nconst autoFilterSettings = {\n  wet: 0,\n  type: 'sine',\n  frequency: 1,\n  depth: 1,\n  baseFrequency: 200,\n  octaves: 2.6,\n  filter: {\n    type: 'lowpass',\n    frequency: 100,\n    rolloff: -12,\n    Q: 1\n  }\n}\n\nconst samplerNode = new Tone.Sampler(samplerSettings)\nconst autoFilterNode = new Tone.AutoFilter(autoFilterSettings).start()\nconst freeverbNode = new Tone.Freeverb(freeverbSettings)\nconst channelNode = new Tone.Channel(channelSettings).toDestination()\nsamplerNode.chain(freeverbNode, channelNode, autoFilterNode)\n\nconst v = 1\nconst d = '4n'\n\nconst partSettings = {\n  scale: generateScale(),\n  sequence: [\n    {\n      time: '0:0:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '0:1:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '0:2:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '0:3:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '1:0:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '1:1:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '1:2:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    },\n    {\n      time: '1:3:0',\n      noteName: 'A1',\n      duration: d,\n      velocity: v\n    }\n  ]\n}\n\nconst partNode = new Tone.Part(function (time, note) {\n  samplerNode.triggerAttackRelease(\n    note.noteName,\n    note.duration,\n    time,\n    note.velocity\n  )\n}, [])\n\npartNode.loopEnd = '2m'\npartNode.loop = true\n\nconst instrument = [\n  {\n    id: generateUniqId(),\n    name: 'Sequencer',\n    type: 'Sequencer',\n    node: partNode,\n    settings: partSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Drum Sampler',\n    type: 'Sampler',\n    node: samplerNode,\n    settings: samplerSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Freeverb',\n    type: 'FreeverbEffect',\n    node: freeverbNode,\n    settings: freeverbSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Channel',\n    type: 'Channel',\n    node: channelNode,\n    settings: channelSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Auto Filter',\n    type: 'AutoFilterEffect',\n    node: autoFilterNode,\n    settings: autoFilterSettings\n  }\n]\n\nexport { instrument }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}