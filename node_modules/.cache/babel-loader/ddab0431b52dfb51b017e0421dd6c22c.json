{"ast":null,"code":"import { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nexport const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) => {\n  const tailTimeTimeoutIds = new WeakMap();\n  return (source, destination, output, input, isOffline) => {\n    const _getAudioNodeConnecti = getAudioNodeConnections(destination),\n          activeInputs = _getAudioNodeConnecti.activeInputs,\n          passiveInputs = _getAudioNodeConnecti.passiveInputs;\n\n    const _getAudioNodeConnecti2 = getAudioNodeConnections(source),\n          outputs = _getAudioNodeConnecti2.outputs;\n\n    const eventListeners = getEventListenersOfAudioNode(source);\n\n    const eventListener = isActive => {\n      const nativeDestinationAudioNode = getNativeAudioNode(destination);\n      const nativeSourceAudioNode = getNativeAudioNode(source);\n\n      if (isActive) {\n        const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n        if (!isOffline && !isPartOfACycle(source)) {\n          connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n        }\n\n        if (isPassiveAudioNode(destination)) {\n          setInternalStateToActive(destination);\n        }\n      } else {\n        const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n        addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n\n        if (!isOffline && !isPartOfACycle(source)) {\n          disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n        }\n\n        const tailTime = getAudioNodeTailTime(destination);\n\n        if (tailTime === 0) {\n          if (isActiveAudioNode(destination)) {\n            setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n          }\n        } else {\n          const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n\n          if (tailTimeTimeoutId !== undefined) {\n            clearTimeout(tailTimeTimeoutId);\n          }\n\n          tailTimeTimeoutIds.set(destination, setTimeout(() => {\n            if (isActiveAudioNode(destination)) {\n              setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n          }, tailTime * 1000));\n        }\n      }\n    };\n\n    if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n      eventListeners.add(eventListener);\n\n      if (isActiveAudioNode(source)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n      } else {\n        addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}