{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  static get A4() {\n    return getA4();\n  }\n\n  static set A4(freq) {\n    setA4(freq);\n  } //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n\n\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\n        method(m, q, s) {\n          let total = 1;\n\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        }\n\n      }\n    });\n  } //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n\n\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n\n\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n\n\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n\n  /**\n   * With no arguments, return 0\n   */\n\n\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n\n\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n\n\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n\n} //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nconst noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":null,"metadata":{},"sourceType":"module"}