{"ast":null,"code":"/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      await new Promise(resolve => {\n        audioWorkletNode.port.onmessage = () => resolve();\n\n        audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      isCallingProcess = await new Promise(resolve => {\n        messageChannel.port1.onmessage = _ref => {\n          let data = _ref.data;\n          return resolve(data === 1);\n        };\n\n        messageChannel.port1.postMessage(0);\n      });\n    } catch {// Ignore errors.\n    } finally {\n      messageChannel.port1.close();\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}