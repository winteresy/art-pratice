{"ast":null,"code":"import { Delay } from \"../core/context/Delay\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect } from \"./FeedbackEffect\";\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new Tone.MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\n\nexport class FeedbackDelay extends FeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    this.name = \"FeedbackDelay\";\n    const options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: options.delayTime,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = this._delayNode.delayTime; // connect it up\n\n    this.connectEffect(this._delayNode);\n    readOnly(this, \"delayTime\");\n  }\n\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}