{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(upPatternGen),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(downPatternGen),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(infiniteGen),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(alternatingGenerator),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(jumpUp),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(jumpDown),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(randomGen),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(randomOnce),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(randomWalk),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(PatternGenerator);\n\nimport { assert } from \"../core/util/Debug\";\nimport { clamp } from \"../core/util/Math\";\n/**\n * Start at the first value and go up to the last\n */\n\nfunction upPatternGen(values) {\n  var index;\n  return _regeneratorRuntime().wrap(function upPatternGen$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        index = 0;\n\n      case 1:\n        if (!(index < values.length)) {\n          _context.next = 8;\n          break;\n        }\n\n        index = clampToArraySize(index, values);\n        _context.next = 5;\n        return values[index];\n\n      case 5:\n        index++;\n        _context.next = 1;\n        break;\n\n      case 8:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n/**\n * Start at the last value and go down to 0\n */\n\n\nfunction downPatternGen(values) {\n  var index;\n  return _regeneratorRuntime().wrap(function downPatternGen$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        index = values.length - 1;\n\n      case 1:\n        if (!(index >= 0)) {\n          _context2.next = 8;\n          break;\n        }\n\n        index = clampToArraySize(index, values);\n        _context2.next = 5;\n        return values[index];\n\n      case 5:\n        index--;\n        _context2.next = 1;\n        break;\n\n      case 8:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n/**\n * Infinitely yield the generator\n */\n\n\nfunction infiniteGen(values, gen) {\n  return _regeneratorRuntime().wrap(function infiniteGen$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (!true) {\n          _context3.next = 4;\n          break;\n        }\n\n        return _context3.delegateYield(gen(values), \"t0\", 2);\n\n      case 2:\n        _context3.next = 0;\n        break;\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n/**\n * Make sure that the index is in the given range\n */\n\n\nfunction clampToArraySize(index, values) {\n  return clamp(index, 0, values.length - 1);\n}\n/**\n * Alternate between two generators\n */\n\n\nfunction alternatingGenerator(values, directionUp) {\n  var index;\n  return _regeneratorRuntime().wrap(function alternatingGenerator$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        index = directionUp ? 0 : values.length - 1;\n\n      case 1:\n        if (!true) {\n          _context4.next = 8;\n          break;\n        }\n\n        index = clampToArraySize(index, values);\n        _context4.next = 5;\n        return values[index];\n\n      case 5:\n        if (directionUp) {\n          index++;\n\n          if (index >= values.length - 1) {\n            directionUp = false;\n          }\n        } else {\n          index--;\n\n          if (index <= 0) {\n            directionUp = true;\n          }\n        }\n\n        _context4.next = 1;\n        break;\n\n      case 8:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4);\n}\n/**\n * Starting from the bottom move up 2, down 1\n */\n\n\nfunction jumpUp(values) {\n  var index, stepIndex;\n  return _regeneratorRuntime().wrap(function jumpUp$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        index = 0;\n        stepIndex = 0;\n\n      case 2:\n        if (!(index < values.length)) {\n          _context5.next = 10;\n          break;\n        }\n\n        index = clampToArraySize(index, values);\n        _context5.next = 6;\n        return values[index];\n\n      case 6:\n        stepIndex++;\n        index += stepIndex % 2 ? 2 : -1;\n        _context5.next = 2;\n        break;\n\n      case 10:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _marked5);\n}\n/**\n * Starting from the top move down 2, up 1\n */\n\n\nfunction jumpDown(values) {\n  var index, stepIndex;\n  return _regeneratorRuntime().wrap(function jumpDown$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        index = values.length - 1;\n        stepIndex = 0;\n\n      case 2:\n        if (!(index >= 0)) {\n          _context6.next = 10;\n          break;\n        }\n\n        index = clampToArraySize(index, values);\n        _context6.next = 6;\n        return values[index];\n\n      case 6:\n        stepIndex++;\n        index += stepIndex % 2 ? -2 : 1;\n        _context6.next = 2;\n        break;\n\n      case 10:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, _marked6);\n}\n/**\n * Choose a random index each time\n */\n\n\nfunction randomGen(values) {\n  var randomIndex;\n  return _regeneratorRuntime().wrap(function randomGen$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        if (!true) {\n          _context7.next = 6;\n          break;\n        }\n\n        randomIndex = Math.floor(Math.random() * values.length);\n        _context7.next = 4;\n        return values[randomIndex];\n\n      case 4:\n        _context7.next = 0;\n        break;\n\n      case 6:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, _marked7);\n}\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\n\n\nfunction randomOnce(values) {\n  var copy, i, randVal, index;\n  return _regeneratorRuntime().wrap(function randomOnce$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        // create an array of indices\n        copy = [];\n\n        for (i = 0; i < values.length; i++) {\n          copy.push(i);\n        }\n\n      case 2:\n        if (!(copy.length > 0)) {\n          _context8.next = 9;\n          break;\n        }\n\n        // random choose an index, and then remove it so it's not chosen again\n        randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n        index = clampToArraySize(randVal[0], values);\n        _context8.next = 7;\n        return values[index];\n\n      case 7:\n        _context8.next = 2;\n        break;\n\n      case 9:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, _marked8);\n}\n/**\n * Randomly choose to walk up or down 1 index in the values array\n */\n\n\nfunction randomWalk(values) {\n  var index;\n  return _regeneratorRuntime().wrap(function randomWalk$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        // randomly choose a starting index in the values array\n        index = Math.floor(Math.random() * values.length);\n\n      case 1:\n        if (!true) {\n          _context9.next = 7;\n          break;\n        }\n\n        if (index === 0) {\n          index++; // at bottom of array, so force upward step\n        } else if (index === values.length - 1) {\n          index--; // at top of array, so force downward step\n        } else if (Math.random() < 0.5) {\n          // else choose random downward or upward step\n          index--;\n        } else {\n          index++;\n        }\n\n        _context9.next = 5;\n        return values[index];\n\n      case 5:\n        _context9.next = 1;\n        break;\n\n      case 7:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, _marked9);\n}\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\n\n\nexport function PatternGenerator(values) {\n  var pattern,\n      index,\n      _args10 = arguments;\n  return _regeneratorRuntime().wrap(function PatternGenerator$(_context10) {\n    while (1) switch (_context10.prev = _context10.next) {\n      case 0:\n        pattern = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : \"up\";\n        index = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : 0;\n        // safeguards\n        assert(values.length > 0, \"The array must have more than one value in it\");\n        _context10.t0 = pattern;\n        _context10.next = _context10.t0 === \"up\" ? 6 : _context10.t0 === \"down\" ? 7 : _context10.t0 === \"upDown\" ? 8 : _context10.t0 === \"downUp\" ? 9 : _context10.t0 === \"alternateUp\" ? 10 : _context10.t0 === \"alternateDown\" ? 11 : _context10.t0 === \"random\" ? 12 : _context10.t0 === \"randomOnce\" ? 13 : _context10.t0 === \"randomWalk\" ? 14 : 15;\n        break;\n\n      case 6:\n        return _context10.delegateYield(infiniteGen(values, upPatternGen), \"t1\", 7);\n\n      case 7:\n        return _context10.delegateYield(infiniteGen(values, downPatternGen), \"t2\", 8);\n\n      case 8:\n        return _context10.delegateYield(alternatingGenerator(values, true), \"t3\", 9);\n\n      case 9:\n        return _context10.delegateYield(alternatingGenerator(values, false), \"t4\", 10);\n\n      case 10:\n        return _context10.delegateYield(infiniteGen(values, jumpUp), \"t5\", 11);\n\n      case 11:\n        return _context10.delegateYield(infiniteGen(values, jumpDown), \"t6\", 12);\n\n      case 12:\n        return _context10.delegateYield(randomGen(values), \"t7\", 13);\n\n      case 13:\n        return _context10.delegateYield(infiniteGen(values, randomOnce), \"t8\", 14);\n\n      case 14:\n        return _context10.delegateYield(randomWalk(values), \"t9\", 15);\n\n      case 15:\n      case \"end\":\n        return _context10.stop();\n    }\n  }, _marked10);\n}","map":null,"metadata":{},"sourceType":"module"}