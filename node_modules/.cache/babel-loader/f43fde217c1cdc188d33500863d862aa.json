{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\n\nexport class MidSideEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"MidSideEffect\";\n    this._midSideMerge = new MidSideMerge({\n      context: this.context\n    });\n    this._midSideSplit = new MidSideSplit({\n      context: this.context\n    });\n    this._midSend = this._midSideSplit.mid;\n    this._sideSend = this._midSideSplit.side;\n    this._midReturn = this._midSideMerge.mid;\n    this._sideReturn = this._midSideMerge.side; // the connections\n\n    this.effectSend.connect(this._midSideSplit);\n\n    this._midSideMerge.connect(this.effectReturn);\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  connectEffectMid() {\n    for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n      nodes[_key] = arguments[_key];\n    }\n\n    this._midSend.chain(...nodes, this._midReturn);\n  }\n  /**\n   * Connect the side chain of the effect\n   */\n\n\n  connectEffectSide() {\n    for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      nodes[_key2] = arguments[_key2];\n    }\n\n    this._sideSend.chain(...nodes, this._sideReturn);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    this._midSend.dispose();\n\n    this._sideSend.dispose();\n\n    this._midReturn.dispose();\n\n    this._sideReturn.dispose();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}