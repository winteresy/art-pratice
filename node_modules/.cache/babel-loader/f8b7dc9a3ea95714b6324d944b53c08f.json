{"ast":null,"code":"import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\n\nexport class NoiseSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n    this.name = \"NoiseSynth\";\n    const options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    this.noise = new Noise(Object.assign({\n      context: this.context\n    }, options.noise));\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope)); // connect the noise to the output\n\n    this.noise.chain(this.envelope, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        decay: 0.1,\n        sustain: 0.0\n      }),\n      noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"white\"\n      })\n    });\n  }\n  /**\n   * Start the attack portion of the envelopes. Unlike other\n   * instruments, Tone.NoiseSynth doesn't have a note.\n   * @example\n   * const noiseSynth = new Tone.NoiseSynth().toDestination();\n   * noiseSynth.triggerAttack();\n   */\n\n\n  triggerAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    time = this.toSeconds(time); // the envelopes\n\n    this.envelope.triggerAttack(time, velocity); // start the noise\n\n    this.noise.start(time);\n\n    if (this.envelope.sustain === 0) {\n      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n    }\n\n    return this;\n  }\n  /**\n   * Start the release portion of the envelopes.\n   */\n\n\n  triggerRelease(time) {\n    time = this.toSeconds(time);\n    this.envelope.triggerRelease(time);\n    this.noise.stop(time + this.toSeconds(this.envelope.release));\n    return this;\n  }\n\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 0);\n\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n\n    return this;\n  }\n\n  triggerAttackRelease(duration, time) {\n    let velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    time = this.toSeconds(time);\n    duration = this.toSeconds(duration);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + duration);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.noise.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}